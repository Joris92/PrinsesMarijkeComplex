const real H_Upstream_high = 5.80;
const real H_Upstream_low = 4.60;
const real H_Downstream = 4.60;
alg real H_Upstream = if Wh.High: H_Upstream_high else H_Upstream_low end;
group North:
  group Upstream:
    group Gates:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Upstream.Gates.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Upstream.Gates.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group Paddles:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Upstream.Paddles.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Upstream.Paddles.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group EnteringTLs:
      group East:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
    end
    group LeavingTLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
    automaton EqualWaterSensor:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool InitialEqual = false;
      alg bool OnCondition = Water.H_Chamber >= H_Upstream;
      location Unequal:
        initial not InitialEqual;
        edge u_on when OnCondition goto Equal;
      location Equal:
        initial InitialEqual;
        edge u_off when not OnCondition goto Unequal;
    end
  end
  group Downstream:
    group Gates:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Downstream.Gates.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Downstream.Gates.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group Paddles:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Downstream.Paddles.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .North.Downstream.Paddles.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group EnteringTLs:
      group East:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
    end
    group LeavingTLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
    automaton EqualWaterSensor:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool InitialEqual = false;
      alg bool OnCondition = Water.H_Chamber <= H_Downstream;
      location Unequal:
        initial not InitialEqual;
        edge u_on when OnCondition goto Equal;
      location Equal:
        initial InitialEqual;
        edge u_off when not OnCondition goto Unequal;
    end
  end
  plant automaton EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_deactivate;
    location Inactive:
      initial;
      marked;
      edge u_activate goto Active;
    location Active:
      edge u_deactivate goto Inactive;
  end
  plant automaton Commands:
    monitor DownstreamGateOpen_act, DownstreamGateClose_act, DownstreamGateStop_act, DownstreamPaddleOpen_act, DownstreamPaddleClose_act, DownstreamPaddleStop_act, DownstreamEnteringTLRedRed_act, DownstreamEnteringTLRed_act, DownstreamEnteringTLRedGreen_act, DownstreamEnteringTLGreen_act, DownstreamLeavingTLRed_act, DownstreamLeavingTLGreen_act, UpstreamGateOpen_act, UpstreamGateClose_act, UpstreamGateStop_act, UpstreamPaddleOpen_act, UpstreamPaddleClose_act, UpstreamPaddleStop_act, UpstreamEnteringTLRedRed_act, UpstreamEnteringTLRed_act, UpstreamEnteringTLRedGreen_act, UpstreamEnteringTLGreen_act, UpstreamLeavingTLRed_act, UpstreamLeavingTLGreen_act;
    uncontrollable Deactivate;
    uncontrollable DownstreamGateOpen_act;
    uncontrollable DownstreamGateClose_act;
    uncontrollable DownstreamGateStop_act;
    uncontrollable DownstreamPaddleOpen_act;
    uncontrollable DownstreamPaddleClose_act;
    uncontrollable DownstreamPaddleStop_act;
    uncontrollable DownstreamEnteringTLRedRed_act;
    uncontrollable DownstreamEnteringTLRed_act;
    uncontrollable DownstreamEnteringTLRedGreen_act;
    uncontrollable DownstreamEnteringTLGreen_act;
    uncontrollable DownstreamLeavingTLRed_act;
    uncontrollable DownstreamLeavingTLGreen_act;
    uncontrollable UpstreamGateOpen_act;
    uncontrollable UpstreamGateClose_act;
    uncontrollable UpstreamGateStop_act;
    uncontrollable UpstreamPaddleOpen_act;
    uncontrollable UpstreamPaddleClose_act;
    uncontrollable UpstreamPaddleStop_act;
    uncontrollable UpstreamEnteringTLRedRed_act;
    uncontrollable UpstreamEnteringTLRed_act;
    uncontrollable UpstreamEnteringTLRedGreen_act;
    uncontrollable UpstreamEnteringTLGreen_act;
    uncontrollable UpstreamLeavingTLRed_act;
    uncontrollable UpstreamLeavingTLGreen_act;
    location NoCommand:
      initial;
      marked;
      edge DownstreamGateOpen_act goto DownstreamGateOpen;
      edge DownstreamGateClose_act goto DownstreamGateClose;
      edge DownstreamGateStop_act goto DownstreamGateStop;
      edge DownstreamPaddleOpen_act goto DownstreamPaddleOpen;
      edge DownstreamPaddleClose_act goto DownstreamPaddleClose;
      edge DownstreamPaddleStop_act goto DownstreamPaddleStop;
      edge DownstreamEnteringTLRedRed_act goto DownstreamEnteringTLRedRed;
      edge DownstreamEnteringTLRed_act goto DownstreamEnteringTLRed;
      edge DownstreamEnteringTLRedGreen_act goto DownstreamEnteringTLRedGreen;
      edge DownstreamEnteringTLGreen_act goto DownstreamEnteringTLGreen;
      edge DownstreamLeavingTLRed_act goto DownstreamLeavingTLRed;
      edge DownstreamLeavingTLGreen_act goto DownstreamLeavingTLGreen;
      edge UpstreamGateOpen_act goto UpstreamGateOpen;
      edge UpstreamGateClose_act goto UpstreamGateClose;
      edge UpstreamGateStop_act goto UpstreamGateStop;
      edge UpstreamPaddleOpen_act goto UpstreamPaddleOpen;
      edge UpstreamPaddleClose_act goto UpstreamPaddleClose;
      edge UpstreamPaddleStop_act goto UpstreamPaddleStop;
      edge UpstreamEnteringTLRedRed_act goto UpstreamEnteringTLRedRed;
      edge UpstreamEnteringTLRed_act goto UpstreamEnteringTLRed;
      edge UpstreamEnteringTLRedGreen_act goto UpstreamEnteringTLRedGreen;
      edge UpstreamEnteringTLGreen_act goto UpstreamEnteringTLGreen;
      edge UpstreamLeavingTLRed_act goto UpstreamLeavingTLRed;
      edge UpstreamLeavingTLGreen_act goto UpstreamLeavingTLGreen;
    location DownstreamGateOpen:
      edge Deactivate goto NoCommand;
    location DownstreamGateClose:
      edge Deactivate goto NoCommand;
    location DownstreamGateStop:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleOpen:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleClose:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleStop:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRedRed:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRed:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRedGreen:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLGreen:
      edge Deactivate goto NoCommand;
    location DownstreamLeavingTLRed:
      edge Deactivate goto NoCommand;
    location DownstreamLeavingTLGreen:
      edge Deactivate goto NoCommand;
    location UpstreamGateOpen:
      edge Deactivate goto NoCommand;
    location UpstreamGateClose:
      edge Deactivate goto NoCommand;
    location UpstreamGateStop:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleOpen:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleClose:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleStop:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRedRed:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRed:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRedGreen:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLGreen:
      edge Deactivate goto NoCommand;
    location UpstreamLeavingTLRed:
      edge Deactivate goto NoCommand;
    location UpstreamLeavingTLGreen:
      edge Deactivate goto NoCommand;
  end
  group GateUpstreamEast:
    alg string GateID = "BVHGateO";
    alg string PaddleID = "BVHPaddleO";
    alg bool PaddleClosed = Upstream.Paddles.East.Sensor.Closed;
    alg int x = 128;
    alg int y = 166;
    alg int OpenDegree = 77;
    alg real Degree = Upstream.Gates.East.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateUpstreamWest:
    alg string GateID = "BVHGateW";
    alg string PaddleID = "BVHPaddleW";
    alg bool PaddleClosed = Upstream.Paddles.West.Sensor.Closed;
    alg int x = 128;
    alg int y = 222;
    alg int OpenDegree = -77;
    alg real Degree = Upstream.Gates.West.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateDownstreamEast:
    alg string GateID = "BNHGateO";
    alg string PaddleID = "BNHPaddleO";
    alg bool PaddleClosed = Downstream.Paddles.East.Sensor.Closed;
    alg int x = 443;
    alg int y = 166;
    alg int OpenDegree = 77;
    alg real Degree = Downstream.Gates.East.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateDownstreamWest:
    alg string GateID = "BNHGateW";
    alg string PaddleID = "BNHPaddleW";
    alg bool PaddleClosed = Downstream.Paddles.West.Sensor.Closed;
    alg int x = 443;
    alg int y = 222;
    alg int OpenDegree = -77;
    alg real Degree = Downstream.Gates.West.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group EnteringTLUpstreamEast:
    alg string Red = "BVHIOR";
    alg string Green = "BVHIOG";
    alg string RedRed = "BVHIOS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Upstream.EnteringTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLUpstreamWest:
    alg string Red = "BVHIWR";
    alg string Green = "BVHIWG";
    alg string RedRed = "BVHIWS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Upstream.EnteringTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLDownstreamEast:
    alg string Red = "BNHIOR";
    alg string Green = "BNHIOG";
    alg string RedRed = "BNHIOS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Downstream.EnteringTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLDownstreamWest:
    alg string Red = "BNHIWR";
    alg string Green = "BNHIWG";
    alg string RedRed = "BNHIWS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Downstream.EnteringTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLUpstreamEast:
    alg string Red = "BVHUOR";
    alg string Green = "BVHUOG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.LeavingTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLUpstreamWest:
    alg string Red = "BVHUWR";
    alg string Green = "BVHUWG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.LeavingTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLDownstreamEast:
    alg string Red = "BNHUOR";
    alg string Green = "BNHUOG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.LeavingTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLDownstreamWest:
    alg string Red = "BNHUWR";
    alg string Green = "BNHUWG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.LeavingTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group GateUpstreamOpen:
    alg string CommandoID = "BVHGateOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateUpstreamStop:
    alg string CommandoID = "BVHGateStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateUpstreamClose:
    alg string CommandoID = "BVHGateClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamOpen:
    alg string CommandoID = "BVHPaddleOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamStop:
    alg string CommandoID = "BVHPaddleStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamClose:
    alg string CommandoID = "BVHPaddleClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamOpen:
    alg string CommandoID = "BNHGateOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamStop:
    alg string CommandoID = "BNHGateStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamClose:
    alg string CommandoID = "BNHGateClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamOpen:
    alg string CommandoID = "BNHPaddleOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamStop:
    alg string CommandoID = "BNHPaddleStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamClose:
    alg string CommandoID = "BNHPaddleClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRed:
    alg string CommandoID = "BNHEnteringRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRedGreen:
    alg string CommandoID = "BNHEnteringRedGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRedGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamGreen:
    alg string CommandoID = "BNHEnteringGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRedRed:
    alg string CommandoID = "BNHEnteringRedRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRedRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRed:
    alg string CommandoID = "BVHEnteringRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRedGreen:
    alg string CommandoID = "BVHEnteringRedGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRedGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamGreen:
    alg string CommandoID = "BVHEnteringGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRedRed:
    alg string CommandoID = "BVHEnteringRedRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRedRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingDownstreamRed:
    alg string CommandoID = "BNHLeavingRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamLeavingTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingDownstreamGreen:
    alg string CommandoID = "BNHLeavingGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamLeavingTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingUpstreamRed:
    alg string CommandoID = "BVHLeavingRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamLeavingTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingUpstreamGreen:
    alg string CommandoID = "BVHLeavingGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamLeavingTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EmergencyStopVis:
    alg string CommandoID = "EmergencyStop";
    svgin id CommandoID event if Commands.NoCommand: EmergencyStop.u_activate else EmergencyStop.u_deactivate end file "../Simulation/visu.svg";
  end
  automaton WEnteringDownstream:
    monitor;
    event vis;
    event invis;
    alg string name = "NBVHITL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WLeavingDownstream:
    monitor;
    event vis;
    event invis;
    alg string name = "NBVHUTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WGatesPaddlesDownstream:
    monitor;
    event vis;
    event invis;
    alg string name1 = "NBVHGates";
    alg string name2 = "NBVHPaddles";
    svgin id name1 event vis file "../Simulation/visu.svg";
    svgin id name1 + "X" event invis file "../Simulation/visu.svg";
    svgin id name2 + "X" event invis file "../Simulation/visu.svg";
    svgout id name1 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    svgout id name2 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WEnteringUpstream:
    monitor;
    event vis;
    event invis;
    alg string name = "NBNHITL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WLeavingUpstream:
    monitor;
    event vis;
    event invis;
    alg string name = "NBNHUTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WGatesPaddlesUpstream:
    monitor;
    event vis;
    event invis;
    alg string name1 = "NBNHGates";
    alg string name2 = "NBNHPaddles";
    svgin id name1 event vis file "../Simulation/visu.svg";
    svgin id name1 + "X" event invis file "../Simulation/visu.svg";
    svgin id name2 + "X" event invis file "../Simulation/visu.svg";
    svgout id name1 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    svgout id name2 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  group Water:
    cont H_Chamber = H_Downstream der if DownstreamOpen and H_Chamber > H_Downstream: -0.5 elif UpstreamOpen and H_Chamber < H_Upstream: +0.5 else 0.0 end;
    alg bool DownstreamOpen = Downstream.Paddles.East.Open or Downstream.Paddles.West.Open;
    alg bool UpstreamOpen = Upstream.Paddles.East.Open or Upstream.Paddles.West.Open;
  end
  svgout id "ChamberH" text value fmt("%.2f", Water.H_Chamber) file "../Simulation/visu.svg";
  svgout id "water_chamber_north" attr "fill" value if Water.H_Chamber >= H_Upstream_high: "#114c8b" else "#9ecaff" end file "../Simulation/visu.svg";
end
group South:
  group Upstream:
    group Gates:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Upstream.Gates.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Upstream.Gates.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group Paddles:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Upstream.Paddles.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Upstream.Paddles.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group EnteringTLs:
      group East:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
    end
    group LeavingTLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
    automaton EqualWaterSensor:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool InitialEqual = false;
      alg bool OnCondition = Water.H_Chamber >= H_Upstream;
      location Unequal:
        initial not InitialEqual;
        edge u_on when OnCondition goto Equal;
      location Equal:
        initial InitialEqual;
        edge u_off when not OnCondition goto Unequal;
    end
  end
  group Downstream:
    group Gates:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Downstream.Gates.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Downstream.Gates.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group Paddles:
      group East:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Downstream.Paddles.East.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
      group West:
        cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
        alg bool Open = Sensor.Open;
        automaton Actuator:
          controllable c_open;
          controllable c_close;
          controllable c_emergencyStop;
          controllable c_endStopClosing;
          controllable c_endStopOpening;
          location Rest:
            initial;
            edge c_open goto Opening;
            edge c_close goto Closing;
          location Opening:
            edge c_emergencyStop, c_endStopOpening goto Rest;
          location Closing:
            edge c_emergencyStop, c_endStopClosing goto Rest;
        end
        automaton Sensor:
          uncontrollable u_open_on;
          uncontrollable u_open_off;
          uncontrollable u_closed_on;
          uncontrollable u_closed_off;
          alg bool InitialLocationClosed = true;
          location Closed:
            initial InitialLocationClosed;
            edge u_closed_off goto Intermediate;
          location Intermediate:
            edge u_closed_on goto Closed;
            edge u_open_on goto Open;
          location Open:
            initial not InitialLocationClosed;
            edge u_open_off goto Intermediate;
        end
        automaton Dynamics:
          alg real ClosedDegree = 0.0;
          alg real OpenDegree = 90.0;
          alg real Degree = .South.Downstream.Paddles.West.Degree;
          location:
            initial;
            edge Sensor.u_open_on when Degree >= OpenDegree;
            edge Sensor.u_closed_off when Degree < OpenDegree;
            edge Sensor.u_closed_on when Degree <= ClosedDegree;
            edge Sensor.u_open_off when Degree > ClosedDegree;
        end
      end
    end
    group EnteringTLs:
      group East:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R1; bool G; bool R2) Sensors = (SensorR1.On, SensorG.On, SensorR2.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_rr;
          controllable c_rg;
          controllable c_g;
          location RedRed:
            marked;
            edge c_r goto Red;
          location Red:
            initial;
            marked;
            edge c_rr goto RedRed;
            edge c_rg goto RedGreen;
          location RedGreen:
            edge c_r goto Red;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR1:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorR2:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR1:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR1.u_on when On;
            edge SensorR1.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = Actuator.Green or Actuator.RedGreen;
          alg bool Off = Actuator.Red or Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
        automaton DynamicsR2:
          alg bool On = Actuator.RedRed;
          alg bool Off = not Actuator.RedRed;
          location:
            initial;
            marked;
            edge SensorR2.u_on when On;
            edge SensorR2.u_off when Off;
        end
      end
    end
    group LeavingTLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
    automaton EqualWaterSensor:
      uncontrollable u_on;
      uncontrollable u_off;
      alg bool InitialEqual = false;
      alg bool OnCondition = Water.H_Chamber <= H_Downstream;
      location Unequal:
        initial not InitialEqual;
        edge u_on when OnCondition goto Equal;
      location Equal:
        initial InitialEqual;
        edge u_off when not OnCondition goto Unequal;
    end
  end
  plant automaton EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_deactivate;
    location Inactive:
      initial;
      marked;
      edge u_activate goto Active;
    location Active:
      edge u_deactivate goto Inactive;
  end
  plant automaton Commands:
    monitor DownstreamGateOpen_act, DownstreamGateClose_act, DownstreamGateStop_act, DownstreamPaddleOpen_act, DownstreamPaddleClose_act, DownstreamPaddleStop_act, DownstreamEnteringTLRedRed_act, DownstreamEnteringTLRed_act, DownstreamEnteringTLRedGreen_act, DownstreamEnteringTLGreen_act, DownstreamLeavingTLRed_act, DownstreamLeavingTLGreen_act, UpstreamGateOpen_act, UpstreamGateClose_act, UpstreamGateStop_act, UpstreamPaddleOpen_act, UpstreamPaddleClose_act, UpstreamPaddleStop_act, UpstreamEnteringTLRedRed_act, UpstreamEnteringTLRed_act, UpstreamEnteringTLRedGreen_act, UpstreamEnteringTLGreen_act, UpstreamLeavingTLRed_act, UpstreamLeavingTLGreen_act;
    uncontrollable Deactivate;
    uncontrollable DownstreamGateOpen_act;
    uncontrollable DownstreamGateClose_act;
    uncontrollable DownstreamGateStop_act;
    uncontrollable DownstreamPaddleOpen_act;
    uncontrollable DownstreamPaddleClose_act;
    uncontrollable DownstreamPaddleStop_act;
    uncontrollable DownstreamEnteringTLRedRed_act;
    uncontrollable DownstreamEnteringTLRed_act;
    uncontrollable DownstreamEnteringTLRedGreen_act;
    uncontrollable DownstreamEnteringTLGreen_act;
    uncontrollable DownstreamLeavingTLRed_act;
    uncontrollable DownstreamLeavingTLGreen_act;
    uncontrollable UpstreamGateOpen_act;
    uncontrollable UpstreamGateClose_act;
    uncontrollable UpstreamGateStop_act;
    uncontrollable UpstreamPaddleOpen_act;
    uncontrollable UpstreamPaddleClose_act;
    uncontrollable UpstreamPaddleStop_act;
    uncontrollable UpstreamEnteringTLRedRed_act;
    uncontrollable UpstreamEnteringTLRed_act;
    uncontrollable UpstreamEnteringTLRedGreen_act;
    uncontrollable UpstreamEnteringTLGreen_act;
    uncontrollable UpstreamLeavingTLRed_act;
    uncontrollable UpstreamLeavingTLGreen_act;
    location NoCommand:
      initial;
      marked;
      edge DownstreamGateOpen_act goto DownstreamGateOpen;
      edge DownstreamGateClose_act goto DownstreamGateClose;
      edge DownstreamGateStop_act goto DownstreamGateStop;
      edge DownstreamPaddleOpen_act goto DownstreamPaddleOpen;
      edge DownstreamPaddleClose_act goto DownstreamPaddleClose;
      edge DownstreamPaddleStop_act goto DownstreamPaddleStop;
      edge DownstreamEnteringTLRedRed_act goto DownstreamEnteringTLRedRed;
      edge DownstreamEnteringTLRed_act goto DownstreamEnteringTLRed;
      edge DownstreamEnteringTLRedGreen_act goto DownstreamEnteringTLRedGreen;
      edge DownstreamEnteringTLGreen_act goto DownstreamEnteringTLGreen;
      edge DownstreamLeavingTLRed_act goto DownstreamLeavingTLRed;
      edge DownstreamLeavingTLGreen_act goto DownstreamLeavingTLGreen;
      edge UpstreamGateOpen_act goto UpstreamGateOpen;
      edge UpstreamGateClose_act goto UpstreamGateClose;
      edge UpstreamGateStop_act goto UpstreamGateStop;
      edge UpstreamPaddleOpen_act goto UpstreamPaddleOpen;
      edge UpstreamPaddleClose_act goto UpstreamPaddleClose;
      edge UpstreamPaddleStop_act goto UpstreamPaddleStop;
      edge UpstreamEnteringTLRedRed_act goto UpstreamEnteringTLRedRed;
      edge UpstreamEnteringTLRed_act goto UpstreamEnteringTLRed;
      edge UpstreamEnteringTLRedGreen_act goto UpstreamEnteringTLRedGreen;
      edge UpstreamEnteringTLGreen_act goto UpstreamEnteringTLGreen;
      edge UpstreamLeavingTLRed_act goto UpstreamLeavingTLRed;
      edge UpstreamLeavingTLGreen_act goto UpstreamLeavingTLGreen;
    location DownstreamGateOpen:
      edge Deactivate goto NoCommand;
    location DownstreamGateClose:
      edge Deactivate goto NoCommand;
    location DownstreamGateStop:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleOpen:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleClose:
      edge Deactivate goto NoCommand;
    location DownstreamPaddleStop:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRedRed:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRed:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLRedGreen:
      edge Deactivate goto NoCommand;
    location DownstreamEnteringTLGreen:
      edge Deactivate goto NoCommand;
    location DownstreamLeavingTLRed:
      edge Deactivate goto NoCommand;
    location DownstreamLeavingTLGreen:
      edge Deactivate goto NoCommand;
    location UpstreamGateOpen:
      edge Deactivate goto NoCommand;
    location UpstreamGateClose:
      edge Deactivate goto NoCommand;
    location UpstreamGateStop:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleOpen:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleClose:
      edge Deactivate goto NoCommand;
    location UpstreamPaddleStop:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRedRed:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRed:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLRedGreen:
      edge Deactivate goto NoCommand;
    location UpstreamEnteringTLGreen:
      edge Deactivate goto NoCommand;
    location UpstreamLeavingTLRed:
      edge Deactivate goto NoCommand;
    location UpstreamLeavingTLGreen:
      edge Deactivate goto NoCommand;
  end
  group GateUpstreamEast:
    alg string GateID = "ZBVHGateO";
    alg string PaddleID = "ZBVHPaddleO";
    alg bool PaddleClosed = Upstream.Paddles.East.Sensor.Closed;
    alg int x = 128;
    alg int y = 250;
    alg int OpenDegree = 77;
    alg real Degree = Upstream.Gates.East.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateUpstreamWest:
    alg string GateID = "ZBVHGateW";
    alg string PaddleID = "ZBVHPaddleW";
    alg bool PaddleClosed = Upstream.Paddles.West.Sensor.Closed;
    alg int x = 128;
    alg int y = 305;
    alg int OpenDegree = -77;
    alg real Degree = Upstream.Gates.West.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateDownstreamEast:
    alg string GateID = "ZBNHGateO";
    alg string PaddleID = "ZBNHPaddleO";
    alg bool PaddleClosed = Downstream.Paddles.East.Sensor.Closed;
    alg int x = 443;
    alg int y = 250;
    alg int OpenDegree = 77;
    alg real Degree = Downstream.Gates.East.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group GateDownstreamWest:
    alg string GateID = "ZBNHGateW";
    alg string PaddleID = "ZBNHPaddleW";
    alg bool PaddleClosed = Downstream.Paddles.West.Sensor.Closed;
    alg int x = 443;
    alg int y = 305;
    alg int OpenDegree = -77;
    alg real Degree = Downstream.Gates.West.Degree;
    svgout id GateID attr "transform" value fmt("rotate(%s, %s, %s)", scale(Degree, 0, 90, 0.01, OpenDegree), x, y) file "../Simulation/visu.svg";
    svgout id PaddleID attr "fill" value if PaddleClosed: "grey" else "lightblue" end file "../Simulation/visu.svg";
  end
  group EnteringTLUpstreamEast:
    alg string Red = "ZBVHIOR";
    alg string Green = "ZBVHIOG";
    alg string RedRed = "ZBVHIOS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Upstream.EnteringTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLUpstreamWest:
    alg string Red = "ZBVHIWR";
    alg string Green = "ZBVHIWG";
    alg string RedRed = "ZBVHIWS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Upstream.EnteringTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLDownstreamEast:
    alg string Red = "ZBNHIOR";
    alg string Green = "ZBNHIOG";
    alg string RedRed = "ZBNHIOS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Downstream.EnteringTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group EnteringTLDownstreamWest:
    alg string Red = "ZBNHIWR";
    alg string Green = "ZBNHIWG";
    alg string RedRed = "ZBNHIWS";
    alg tuple(bool Red; bool Green; bool RedRed) Sensors = Downstream.EnteringTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
    svgout id RedRed attr "fill" value if Sensors[RedRed]: "red" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLUpstreamEast:
    alg string Red = "ZBVHUOR";
    alg string Green = "ZBVHUOG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.LeavingTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLUpstreamWest:
    alg string Red = "ZBVHUWR";
    alg string Green = "ZBVHUWG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.LeavingTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLDownstreamEast:
    alg string Red = "ZBNHUOR";
    alg string Green = "ZBNHUOG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.LeavingTLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group LeavingTLDownstreamWest:
    alg string Red = "ZBNHUWR";
    alg string Green = "ZBNHUWG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.LeavingTLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group GateUpstreamOpen:
    alg string CommandoID = "ZBVHGateOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateUpstreamStop:
    alg string CommandoID = "ZBVHGateStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateUpstreamClose:
    alg string CommandoID = "ZBVHGateClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamGateClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamOpen:
    alg string CommandoID = "ZBVHPaddleOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamStop:
    alg string CommandoID = "ZBVHPaddleStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleUpstreamClose:
    alg string CommandoID = "ZBVHPaddleClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamPaddleClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamOpen:
    alg string CommandoID = "ZBNHGateOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamStop:
    alg string CommandoID = "ZBNHGateStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group GateDownstreamClose:
    alg string CommandoID = "ZBNHGateClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamGateClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamOpen:
    alg string CommandoID = "ZBNHPaddleOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamStop:
    alg string CommandoID = "ZBNHPaddleStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleDownstreamClose:
    alg string CommandoID = "ZBNHPaddleClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamPaddleClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRed:
    alg string CommandoID = "ZBNHEnteringRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRedGreen:
    alg string CommandoID = "ZBNHEnteringRedGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRedGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamGreen:
    alg string CommandoID = "ZBNHEnteringGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringDownstreamRedRed:
    alg string CommandoID = "ZBNHEnteringRedRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamEnteringTLRedRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRed:
    alg string CommandoID = "ZBVHEnteringRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRedGreen:
    alg string CommandoID = "ZBVHEnteringRedGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRedGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamGreen:
    alg string CommandoID = "ZBVHEnteringGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EnteringUpstreamRedRed:
    alg string CommandoID = "ZBVHEnteringRedRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamEnteringTLRedRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingDownstreamRed:
    alg string CommandoID = "ZBNHLeavingRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamLeavingTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingDownstreamGreen:
    alg string CommandoID = "ZBNHLeavingGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamLeavingTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingUpstreamRed:
    alg string CommandoID = "ZBVHLeavingRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamLeavingTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group LeavingUpstreamGreen:
    alg string CommandoID = "ZBVHLeavingGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamLeavingTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EmergencyStopVis:
    alg string CommandoID = "ZEmergencyStop";
    svgin id CommandoID event if North.Commands.NoCommand: EmergencyStop.u_activate else EmergencyStop.u_deactivate end file "../Simulation/visu.svg";
  end
  automaton WEnteringDownstream:
    monitor;
    event vis;
    event invis;
    alg string name = "ZBVHITL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WLeavingDownstream:
    monitor;
    event vis;
    event invis;
    alg string name = "ZBVHUTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WGatesPaddlesDownstream:
    monitor;
    event vis;
    event invis;
    alg string name1 = "ZBVHGates";
    alg string name2 = "ZBVHPaddles";
    svgin id name1 event vis file "../Simulation/visu.svg";
    svgin id name1 + "X" event invis file "../Simulation/visu.svg";
    svgin id name2 + "X" event invis file "../Simulation/visu.svg";
    svgout id name1 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    svgout id name2 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WEnteringUpstream:
    monitor;
    event vis;
    event invis;
    alg string name = "ZBNHITL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WLeavingUpstream:
    monitor;
    event vis;
    event invis;
    alg string name = "ZBNHUTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton WGatesPaddlesUpstream:
    monitor;
    event vis;
    event invis;
    alg string name1 = "ZBNHGates";
    alg string name2 = "ZBNHPaddles";
    svgin id name1 event vis file "../Simulation/visu.svg";
    svgin id name1 + "X" event invis file "../Simulation/visu.svg";
    svgin id name2 + "X" event invis file "../Simulation/visu.svg";
    svgout id name1 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    svgout id name2 + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  group Water:
    cont H_Chamber = H_Downstream der if DownstreamOpen and H_Chamber > H_Downstream: -2.0 elif UpstreamOpen and H_Chamber < H_Upstream: +2.0 else 0.0 end;
    alg bool DownstreamOpen = Downstream.Paddles.East.Open or Downstream.Paddles.West.Open;
    alg bool UpstreamOpen = Upstream.Paddles.East.Open or Upstream.Paddles.West.Open;
  end
  svgout id "ZChamberH" text value fmt("%.2f", Water.H_Chamber) file "../Simulation/visu.svg";
  svgout id "water_chamber_south" attr "fill" value if Water.H_Chamber >= H_Upstream_high: "#114c8b" else "#9ecaff" end file "../Simulation/visu.svg";
end
group Barrier:
  group Downstream:
    group TLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
  end
  group Upstream:
    group TLs:
      group East:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
      group West:
        alg tuple(bool R; bool G) Sensors = (SensorR.On, SensorG.On);
        plant automaton Actuator:
          controllable c_r;
          controllable c_g;
          location Red:
            initial;
            marked;
            edge c_g goto Green;
          location Green:
            edge c_r goto Red;
        end
        automaton SensorR:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = true;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton SensorG:
          uncontrollable u_on;
          uncontrollable u_off;
          alg bool InitialOn = false;
          location Off:
            initial not InitialOn;
            edge u_on goto On;
          location On:
            initial InitialOn;
            edge u_off goto Off;
        end
        automaton DynamicsR:
          alg bool On = not Actuator.Green;
          alg bool Off = Actuator.Green;
          location:
            initial;
            marked;
            edge SensorR.u_on when On;
            edge SensorR.u_off when Off;
        end
        automaton DynamicsG:
          alg bool On = not Actuator.Red;
          alg bool Off = Actuator.Red;
          location:
            initial;
            marked;
            edge SensorG.u_on when On;
            edge SensorG.u_off when Off;
        end
      end
    end
  end
  group Barrier:
    cont Degree = 0.0 der if Actuator.Opening and Degree < 90.0: +30.0 elif Actuator.Closing and Degree > 0.0: -30.0 else 0.0 end;
    alg bool Open = Sensor.Open;
    automaton Actuator:
      controllable c_open;
      controllable c_close;
      controllable c_emergencyStop;
      controllable c_endStopClosing;
      controllable c_endStopOpening;
      location Rest:
        initial;
        edge c_open goto Opening;
        edge c_close goto Closing;
      location Opening:
        edge c_emergencyStop, c_endStopOpening goto Rest;
      location Closing:
        edge c_emergencyStop, c_endStopClosing goto Rest;
    end
    automaton Sensor:
      uncontrollable u_open_on;
      uncontrollable u_open_off;
      uncontrollable u_closed_on;
      uncontrollable u_closed_off;
      alg bool InitialLocationClosed = true;
      location Closed:
        initial InitialLocationClosed;
        edge u_closed_off goto Intermediate;
      location Intermediate:
        edge u_closed_on goto Closed;
        edge u_open_on goto Open;
      location Open:
        initial not InitialLocationClosed;
        edge u_open_off goto Intermediate;
    end
    automaton Dynamics:
      alg real ClosedDegree = 0.0;
      alg real OpenDegree = 90.0;
      alg real Degree = .Barrier.Barrier.Degree;
      location:
        initial;
        edge Sensor.u_open_on when Degree >= OpenDegree;
        edge Sensor.u_closed_off when Degree < OpenDegree;
        edge Sensor.u_closed_on when Degree <= ClosedDegree;
        edge Sensor.u_open_off when Degree > ClosedDegree;
    end
  end
  plant automaton EmergencyStop:
    uncontrollable u_activate;
    uncontrollable u_deactivate;
    location Inactive:
      initial;
      marked;
      edge u_activate goto Active;
    location Active:
      edge u_deactivate goto Inactive;
  end
  plant automaton Commands:
    monitor BarrierOpen_act, BarrierClose_act, BarrierStop_act, DownstreamTLRed_act, DownstreamTLGreen_act, UpstreamTLRed_act, UpstreamTLGreen_act;
    uncontrollable Deactivate;
    uncontrollable BarrierOpen_act;
    uncontrollable BarrierClose_act;
    uncontrollable BarrierStop_act;
    uncontrollable DownstreamTLRed_act;
    uncontrollable DownstreamTLGreen_act;
    uncontrollable UpstreamTLRed_act;
    uncontrollable UpstreamTLGreen_act;
    location NoCommand:
      initial;
      marked;
      edge BarrierOpen_act goto BarrierOpen;
      edge BarrierClose_act goto BarrierClose;
      edge BarrierStop_act goto BarrierStop;
      edge DownstreamTLRed_act goto DownstreamTLRed;
      edge DownstreamTLGreen_act goto DownstreamTLGreen;
      edge UpstreamTLRed_act goto UpstreamTLRed;
      edge UpstreamTLGreen_act goto UpstreamTLGreen;
    location BarrierOpen:
      edge Deactivate goto NoCommand;
    location BarrierClose:
      edge Deactivate goto NoCommand;
    location BarrierStop:
      edge Deactivate goto NoCommand;
    location DownstreamTLRed:
      edge Deactivate goto NoCommand;
    location DownstreamTLGreen:
      edge Deactivate goto NoCommand;
    location UpstreamTLRed:
      edge Deactivate goto NoCommand;
    location UpstreamTLGreen:
      edge Deactivate goto NoCommand;
  end
  group TLUpstreamEast:
    alg string Red = "SBVHOR";
    alg string Green = "SBVHOG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.TLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group TLUpstreamWest:
    alg string Red = "SBVHWR";
    alg string Green = "SBVHWG";
    alg tuple(bool Red; bool Green) Sensors = Upstream.TLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group TLDownstreamEast:
    alg string Red = "SBNHOR";
    alg string Green = "SBNHOG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.TLs.East.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group TLDownstreamWest:
    alg string Red = "SBNHWR";
    alg string Green = "SBNHWG";
    alg tuple(bool Red; bool Green) Sensors = Downstream.TLs.West.Sensors;
    svgout id Red attr "fill" value if Sensors[Red]: "red" else "grey" end file "../Simulation/visu.svg";
    svgout id Green attr "fill" value if Sensors[Green]: "green" else "grey" end file "../Simulation/visu.svg";
  end
  group PaddleOpen:
    alg string CommandoID = "PaddleOpen";
    svgin id CommandoID event if Commands.NoCommand: Commands.BarrierOpen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleStop:
    alg string CommandoID = "PaddleStop";
    svgin id CommandoID event if Commands.NoCommand: Commands.BarrierStop_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group PaddleClose:
    alg string CommandoID = "PaddleClose";
    svgin id CommandoID event if Commands.NoCommand: Commands.BarrierClose_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group TLDownstreamRed:
    alg string CommandoID = "SBNHRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group TLDownstreamGreen:
    alg string CommandoID = "SBNHGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.DownstreamTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group TLUpstreamRed:
    alg string CommandoID = "SBVHRed";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamTLRed_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group TLUpstreamGreen:
    alg string CommandoID = "SBVHGreen";
    svgin id CommandoID event if Commands.NoCommand: Commands.UpstreamTLGreen_act else Commands.Deactivate end file "../Simulation/visu.svg";
  end
  group EmergencyStopVis:
    alg string CommandoID = "SEmergencyStop";
    svgin id CommandoID event if North.Commands.NoCommand: EmergencyStop.u_activate else EmergencyStop.u_deactivate end file "../Simulation/visu.svg";
  end
  automaton STLDownstream:
    monitor;
    event vis;
    event invis;
    alg string name = "SBNHTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton STLUpstream:
    monitor;
    event vis;
    event invis;
    alg string name = "SBVHTL";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  automaton PaddleW:
    monitor;
    event vis;
    event invis;
    alg string name = "Paddle";
    svgin id name event vis file "../Simulation/visu.svg";
    svgin id name + "X" event invis file "../Simulation/visu.svg";
    svgout id name + "W" attr "visibility" value if Invisible: "hidden" else "visible" end file "../Simulation/visu.svg";
    location Invisible:
      initial;
      edge vis goto Visible;
    location Visible:
      edge invis goto Invisible;
  end
  svgout id "PaddleIn" attr "visibility" value if Barrier.Sensor.Open: "hidden" else "visible" end file "../Simulation/visu.svg";
end
group sup:
  group North:
    group Upstream:
      group Gates:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Upstream.Gates.East.Actuator.c_open goto Opening;
              edge .North.Upstream.Gates.East.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Upstream.Gates.East.Actuator.c_emergencyStop, .North.Upstream.Gates.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Upstream.Gates.East.Actuator.c_emergencyStop, .North.Upstream.Gates.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Upstream.Gates.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Upstream.Gates.East.Sensor.u_closed_on goto Closed;
              edge .North.Upstream.Gates.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Upstream.Gates.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Upstream.Gates.East.Sensor.u_open_on, .North.Upstream.Gates.East.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Upstream.Gates.East.Sensor.u_closed_on, .North.Upstream.Gates.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Upstream.Gates.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Upstream.Gates.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Upstream.Gates.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Upstream.Gates.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Upstream.Gates.West.Actuator.c_open goto Opening;
              edge .North.Upstream.Gates.West.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Upstream.Gates.West.Actuator.c_emergencyStop, .North.Upstream.Gates.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Upstream.Gates.West.Actuator.c_emergencyStop, .North.Upstream.Gates.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Upstream.Gates.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Upstream.Gates.West.Sensor.u_closed_on goto Closed;
              edge .North.Upstream.Gates.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Upstream.Gates.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Upstream.Gates.West.Sensor.u_open_on, .North.Upstream.Gates.West.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Upstream.Gates.West.Sensor.u_closed_on, .North.Upstream.Gates.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Upstream.Gates.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Upstream.Gates.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Upstream.Gates.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Upstream.Gates.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group Paddles:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Upstream.Paddles.East.Actuator.c_open goto Opening;
              edge .North.Upstream.Paddles.East.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Upstream.Paddles.East.Actuator.c_emergencyStop, .North.Upstream.Paddles.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Upstream.Paddles.East.Actuator.c_emergencyStop, .North.Upstream.Paddles.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Upstream.Paddles.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Upstream.Paddles.East.Sensor.u_closed_on goto Closed;
              edge .North.Upstream.Paddles.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Upstream.Paddles.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Upstream.Paddles.East.Sensor.u_open_on, .North.Upstream.Paddles.East.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Upstream.Paddles.East.Sensor.u_closed_on, .North.Upstream.Paddles.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Upstream.Paddles.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Upstream.Paddles.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Upstream.Paddles.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Upstream.Paddles.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Upstream.Paddles.West.Actuator.c_open goto Opening;
              edge .North.Upstream.Paddles.West.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Upstream.Paddles.West.Actuator.c_emergencyStop, .North.Upstream.Paddles.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Upstream.Paddles.West.Actuator.c_emergencyStop, .North.Upstream.Paddles.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Upstream.Paddles.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Upstream.Paddles.West.Sensor.u_closed_on goto Closed;
              edge .North.Upstream.Paddles.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Upstream.Paddles.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Upstream.Paddles.West.Sensor.u_open_on, .North.Upstream.Paddles.West.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Upstream.Paddles.West.Sensor.u_closed_on, .North.Upstream.Paddles.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Upstream.Paddles.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Upstream.Paddles.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Upstream.Paddles.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Upstream.Paddles.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group EnteringTLs:
        alg bool RedRed = East.RedRed and West.RedRed;
        alg bool Red = East.Red and West.Red;
        alg bool RedGreen = East.RedGreen and West.RedGreen;
        alg bool Green = East.Green and West.Green;
        alg bool RedOrRedRed = Red or RedRed;
        group East:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .North.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.East.Actuator.c_rr goto RedRed;
              edge .North.Upstream.EnteringTLs.East.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .North.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
              edge .North.Upstream.EnteringTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .North.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.East.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.East.SensorR1.u_on when On;
              edge .North.Upstream.EnteringTLs.East.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.East.SensorG.u_on when On;
              edge .North.Upstream.EnteringTLs.East.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.East.SensorR2.u_on when On;
              edge .North.Upstream.EnteringTLs.East.SensorR2.u_off when Off;
          end
        end
        group West:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .North.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.West.Actuator.c_rr goto RedRed;
              edge .North.Upstream.EnteringTLs.West.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .North.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
              edge .North.Upstream.EnteringTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .North.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.EnteringTLs.West.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.West.SensorR1.u_on when On;
              edge .North.Upstream.EnteringTLs.West.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.West.SensorG.u_on when On;
              edge .North.Upstream.EnteringTLs.West.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Upstream.EnteringTLs.West.SensorR2.u_on when On;
              edge .North.Upstream.EnteringTLs.West.SensorR2.u_off when Off;
          end
        end
      end
      group LeavingTLs:
        alg bool Red = East.Red and West.Red;
        alg bool Green = East.Green and West.Green;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .North.Upstream.LeavingTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.LeavingTLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.LeavingTLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.LeavingTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.LeavingTLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.East.SensorR.u_on when On;
              edge .North.Upstream.LeavingTLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.East.SensorG.u_on when On;
              edge .North.Upstream.LeavingTLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .North.Upstream.LeavingTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.LeavingTLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.LeavingTLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Upstream.LeavingTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Upstream.LeavingTLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.West.SensorR.u_on when On;
              edge .North.Upstream.LeavingTLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .North.Upstream.LeavingTLs.West.SensorG.u_on when On;
              edge .North.Upstream.LeavingTLs.West.SensorG.u_off when Off;
          end
        end
      end
      plant automaton EqualWaterSensor:
        alg bool InitialEqual = false;
        location Unequal:
          initial not InitialEqual;
          marked not InitialEqual;
          edge .North.Upstream.EqualWaterSensor.u_on goto Equal;
        location Equal:
          initial InitialEqual;
          marked InitialEqual;
          edge .North.Upstream.EqualWaterSensor.u_off goto Unequal;
      end
    end
    group Downstream:
      group Gates:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Downstream.Gates.East.Actuator.c_open goto Opening;
              edge .North.Downstream.Gates.East.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Downstream.Gates.East.Actuator.c_emergencyStop, .North.Downstream.Gates.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Downstream.Gates.East.Actuator.c_emergencyStop, .North.Downstream.Gates.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Downstream.Gates.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Downstream.Gates.East.Sensor.u_closed_on goto Closed;
              edge .North.Downstream.Gates.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Downstream.Gates.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Downstream.Gates.East.Sensor.u_open_on, .North.Downstream.Gates.East.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Downstream.Gates.East.Sensor.u_closed_on, .North.Downstream.Gates.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Downstream.Gates.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Downstream.Gates.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Downstream.Gates.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Downstream.Gates.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Downstream.Gates.West.Actuator.c_open goto Opening;
              edge .North.Downstream.Gates.West.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Downstream.Gates.West.Actuator.c_emergencyStop, .North.Downstream.Gates.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Downstream.Gates.West.Actuator.c_emergencyStop, .North.Downstream.Gates.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Downstream.Gates.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Downstream.Gates.West.Sensor.u_closed_on goto Closed;
              edge .North.Downstream.Gates.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Downstream.Gates.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Downstream.Gates.West.Sensor.u_open_on, .North.Downstream.Gates.West.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Downstream.Gates.West.Sensor.u_closed_on, .North.Downstream.Gates.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Downstream.Gates.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Downstream.Gates.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Downstream.Gates.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Downstream.Gates.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group Paddles:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Downstream.Paddles.East.Actuator.c_open goto Opening;
              edge .North.Downstream.Paddles.East.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Downstream.Paddles.East.Actuator.c_emergencyStop, .North.Downstream.Paddles.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Downstream.Paddles.East.Actuator.c_emergencyStop, .North.Downstream.Paddles.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Downstream.Paddles.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Downstream.Paddles.East.Sensor.u_closed_on goto Closed;
              edge .North.Downstream.Paddles.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Downstream.Paddles.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Downstream.Paddles.East.Sensor.u_open_on, .North.Downstream.Paddles.East.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Downstream.Paddles.East.Sensor.u_closed_on, .North.Downstream.Paddles.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Downstream.Paddles.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Downstream.Paddles.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Downstream.Paddles.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Downstream.Paddles.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .North.Downstream.Paddles.West.Actuator.c_open goto Opening;
              edge .North.Downstream.Paddles.West.Actuator.c_close goto Closing;
            location Opening:
              edge .North.Downstream.Paddles.West.Actuator.c_emergencyStop, .North.Downstream.Paddles.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .North.Downstream.Paddles.West.Actuator.c_emergencyStop, .North.Downstream.Paddles.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .North.Downstream.Paddles.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .North.Downstream.Paddles.West.Sensor.u_closed_on goto Closed;
              edge .North.Downstream.Paddles.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .North.Downstream.Paddles.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .North.Downstream.Paddles.West.Sensor.u_open_on, .North.Downstream.Paddles.West.Sensor.u_closed_off when Actuator.Opening;
              edge .North.Downstream.Paddles.West.Sensor.u_closed_on, .North.Downstream.Paddles.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .North.Downstream.Paddles.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .North.Downstream.Paddles.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .North.Downstream.Paddles.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .North.Downstream.Paddles.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group EnteringTLs:
        alg bool RedRed = East.RedRed and West.RedRed;
        alg bool Red = East.Red and West.Red;
        alg bool RedGreen = East.RedGreen and West.RedGreen;
        alg bool Green = East.Green and West.Green;
        alg bool RedOrRedRed = Red or RedRed;
        group East:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .North.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.East.Actuator.c_rr goto RedRed;
              edge .North.Downstream.EnteringTLs.East.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .North.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
              edge .North.Downstream.EnteringTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .North.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.East.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.East.SensorR1.u_on when On;
              edge .North.Downstream.EnteringTLs.East.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.East.SensorG.u_on when On;
              edge .North.Downstream.EnteringTLs.East.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.East.SensorR2.u_on when On;
              edge .North.Downstream.EnteringTLs.East.SensorR2.u_off when Off;
          end
        end
        group West:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .North.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.West.Actuator.c_rr goto RedRed;
              edge .North.Downstream.EnteringTLs.West.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .North.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
              edge .North.Downstream.EnteringTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .North.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.EnteringTLs.West.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.West.SensorR1.u_on when On;
              edge .North.Downstream.EnteringTLs.West.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.West.SensorG.u_on when On;
              edge .North.Downstream.EnteringTLs.West.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .North.Downstream.EnteringTLs.West.SensorR2.u_on when On;
              edge .North.Downstream.EnteringTLs.West.SensorR2.u_off when Off;
          end
        end
      end
      group LeavingTLs:
        alg bool Red = East.Red and West.Red;
        alg bool Green = East.Green and West.Green;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .North.Downstream.LeavingTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.LeavingTLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.LeavingTLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.LeavingTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.LeavingTLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.East.SensorR.u_on when On;
              edge .North.Downstream.LeavingTLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.East.SensorG.u_on when On;
              edge .North.Downstream.LeavingTLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .North.Downstream.LeavingTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.LeavingTLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.LeavingTLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .North.Downstream.LeavingTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .North.Downstream.LeavingTLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.West.SensorR.u_on when On;
              edge .North.Downstream.LeavingTLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .North.Downstream.LeavingTLs.West.SensorG.u_on when On;
              edge .North.Downstream.LeavingTLs.West.SensorG.u_off when Off;
          end
        end
      end
      plant automaton EqualWaterSensor:
        alg bool InitialEqual = false;
        location Unequal:
          initial not InitialEqual;
          marked not InitialEqual;
          edge .North.Downstream.EqualWaterSensor.u_on goto Equal;
        location Equal:
          initial InitialEqual;
          marked InitialEqual;
          edge .North.Downstream.EqualWaterSensor.u_off goto Unequal;
      end
    end
    plant automaton EmergencyStop:
      location Inactive:
        initial;
        marked;
        edge .North.EmergencyStop.u_activate goto Active;
      location Active:
        edge .North.EmergencyStop.u_deactivate goto Inactive;
    end
    plant automaton Commands:
      monitor;
      location NoCommand:
        initial;
        marked;
        edge .North.Commands.DownstreamGateOpen_act goto DownstreamGateOpen;
        edge .North.Commands.DownstreamGateClose_act goto DownstreamGateClose;
        edge .North.Commands.DownstreamGateStop_act goto DownstreamGateStop;
        edge .North.Commands.DownstreamPaddleOpen_act goto DownstreamPaddleOpen;
        edge .North.Commands.DownstreamPaddleClose_act goto DownstreamPaddleClose;
        edge .North.Commands.DownstreamPaddleStop_act goto DownstreamPaddleStop;
        edge .North.Commands.DownstreamEnteringTLRedRed_act goto DownstreamEnteringTLRedRed;
        edge .North.Commands.DownstreamEnteringTLRed_act goto DownstreamEnteringTLRed;
        edge .North.Commands.DownstreamEnteringTLRedGreen_act goto DownstreamEnteringTLRedGreen;
        edge .North.Commands.DownstreamEnteringTLGreen_act goto DownstreamEnteringTLGreen;
        edge .North.Commands.DownstreamLeavingTLRed_act goto DownstreamLeavingTLRed;
        edge .North.Commands.DownstreamLeavingTLGreen_act goto DownstreamLeavingTLGreen;
        edge .North.Commands.UpstreamGateOpen_act goto UpstreamGateOpen;
        edge .North.Commands.UpstreamGateClose_act goto UpstreamGateClose;
        edge .North.Commands.UpstreamGateStop_act goto UpstreamGateStop;
        edge .North.Commands.UpstreamPaddleOpen_act goto UpstreamPaddleOpen;
        edge .North.Commands.UpstreamPaddleClose_act goto UpstreamPaddleClose;
        edge .North.Commands.UpstreamPaddleStop_act goto UpstreamPaddleStop;
        edge .North.Commands.UpstreamEnteringTLRedRed_act goto UpstreamEnteringTLRedRed;
        edge .North.Commands.UpstreamEnteringTLRed_act goto UpstreamEnteringTLRed;
        edge .North.Commands.UpstreamEnteringTLRedGreen_act goto UpstreamEnteringTLRedGreen;
        edge .North.Commands.UpstreamEnteringTLGreen_act goto UpstreamEnteringTLGreen;
        edge .North.Commands.UpstreamLeavingTLRed_act goto UpstreamLeavingTLRed;
        edge .North.Commands.UpstreamLeavingTLGreen_act goto UpstreamLeavingTLGreen;
      location DownstreamGateOpen:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamGateClose:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamGateStop:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleOpen:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleClose:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleStop:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRedRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRedGreen:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLGreen:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamLeavingTLRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location DownstreamLeavingTLGreen:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamGateOpen:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamGateClose:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamGateStop:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleOpen:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleClose:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleStop:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRedRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRedGreen:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLGreen:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamLeavingTLRed:
        edge .North.Commands.Deactivate goto NoCommand;
      location UpstreamLeavingTLGreen:
        edge .North.Commands.Deactivate goto NoCommand;
    end
    supervisor invariant not Downstream.Paddles.Closed disables .North.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .North.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .North.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .North.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .North.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .North.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .North.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .North.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant Downstream.EqualWaterSensor.Unequal disables .North.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant Downstream.EqualWaterSensor.Unequal disables .North.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant Upstream.EqualWaterSensor.Unequal disables .North.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant Upstream.EqualWaterSensor.Unequal disables .North.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .North.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .North.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .North.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .North.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .North.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .North.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .North.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .North.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.LeavingTLs.Red disables .North.Downstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.LeavingTLs.Red disables .North.Downstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.LeavingTLs.Red disables .North.Upstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.LeavingTLs.Red disables .North.Upstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .North.Downstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .North.Downstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .North.Upstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .North.Upstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .North.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .North.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .North.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .North.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant not Downstream.LeavingTLs.Red disables .North.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant not Downstream.LeavingTLs.Red disables .North.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant not Upstream.LeavingTLs.Red disables .North.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant not Upstream.LeavingTLs.Red disables .North.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Paddles.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Downstream.Paddles.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Paddles.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .North.Upstream.Paddles.West.Actuator.c_close;
    supervisor invariant .North.Downstream.Gates.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamGateStop;
    supervisor invariant .North.Downstream.Gates.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamGateStop;
    supervisor invariant .North.Upstream.Gates.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamGateStop;
    supervisor invariant .North.Upstream.Gates.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamGateStop;
    supervisor invariant .North.Downstream.Paddles.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamPaddleStop;
    supervisor invariant .North.Downstream.Paddles.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamPaddleStop;
    supervisor invariant .North.Upstream.Paddles.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamPaddleStop;
    supervisor invariant .North.Upstream.Paddles.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamPaddleStop;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .North.Downstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .North.Downstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .North.Upstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .North.Upstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .North.Downstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .North.Downstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .North.Upstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .North.Upstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant .North.Downstream.Gates.East.Actuator.c_open needs Commands.DownstreamGateOpen;
    supervisor invariant .North.Downstream.Gates.West.Actuator.c_open needs Commands.DownstreamGateOpen;
    supervisor invariant .North.Upstream.Gates.East.Actuator.c_open needs Commands.UpstreamGateOpen;
    supervisor invariant .North.Upstream.Gates.West.Actuator.c_open needs Commands.UpstreamGateOpen;
    supervisor invariant .North.Downstream.Gates.East.Actuator.c_close needs Commands.DownstreamGateClose;
    supervisor invariant .North.Downstream.Gates.West.Actuator.c_close needs Commands.DownstreamGateClose;
    supervisor invariant .North.Upstream.Gates.East.Actuator.c_close needs Commands.UpstreamGateClose;
    supervisor invariant .North.Upstream.Gates.West.Actuator.c_close needs Commands.UpstreamGateClose;
    supervisor invariant .North.Downstream.Paddles.East.Actuator.c_open needs Commands.DownstreamPaddleOpen;
    supervisor invariant .North.Downstream.Paddles.West.Actuator.c_open needs Commands.DownstreamPaddleOpen;
    supervisor invariant .North.Upstream.Paddles.East.Actuator.c_open needs Commands.UpstreamPaddleOpen;
    supervisor invariant .North.Upstream.Paddles.West.Actuator.c_open needs Commands.UpstreamPaddleOpen;
    supervisor invariant .North.Downstream.Paddles.East.Actuator.c_close needs Commands.DownstreamPaddleClose;
    supervisor invariant .North.Downstream.Paddles.West.Actuator.c_close needs Commands.DownstreamPaddleClose;
    supervisor invariant .North.Upstream.Paddles.East.Actuator.c_close needs Commands.UpstreamPaddleClose;
    supervisor invariant .North.Upstream.Paddles.West.Actuator.c_close needs Commands.UpstreamPaddleClose;
    supervisor invariant .North.Downstream.EnteringTLs.East.Actuator.c_rr needs Commands.DownstreamEnteringTLRedRed;
    supervisor invariant .North.Downstream.EnteringTLs.West.Actuator.c_rr needs Commands.DownstreamEnteringTLRedRed;
    supervisor invariant .North.Upstream.EnteringTLs.East.Actuator.c_rr needs Commands.UpstreamEnteringTLRedRed;
    supervisor invariant .North.Upstream.EnteringTLs.West.Actuator.c_rr needs Commands.UpstreamEnteringTLRedRed;
    supervisor invariant .North.Downstream.EnteringTLs.East.Actuator.c_r needs Commands.DownstreamEnteringTLRed;
    supervisor invariant .North.Downstream.EnteringTLs.West.Actuator.c_r needs Commands.DownstreamEnteringTLRed;
    supervisor invariant .North.Upstream.EnteringTLs.East.Actuator.c_r needs Commands.UpstreamEnteringTLRed;
    supervisor invariant .North.Upstream.EnteringTLs.West.Actuator.c_r needs Commands.UpstreamEnteringTLRed;
    supervisor invariant .North.Downstream.EnteringTLs.East.Actuator.c_rg needs Commands.DownstreamEnteringTLRedGreen;
    supervisor invariant .North.Downstream.EnteringTLs.West.Actuator.c_rg needs Commands.DownstreamEnteringTLRedGreen;
    supervisor invariant .North.Upstream.EnteringTLs.East.Actuator.c_rg needs Commands.UpstreamEnteringTLRedGreen;
    supervisor invariant .North.Upstream.EnteringTLs.West.Actuator.c_rg needs Commands.UpstreamEnteringTLRedGreen;
    supervisor invariant .North.Downstream.EnteringTLs.East.Actuator.c_g needs Commands.DownstreamEnteringTLGreen;
    supervisor invariant .North.Downstream.EnteringTLs.West.Actuator.c_g needs Commands.DownstreamEnteringTLGreen;
    supervisor invariant .North.Upstream.EnteringTLs.East.Actuator.c_g needs Commands.UpstreamEnteringTLGreen;
    supervisor invariant .North.Upstream.EnteringTLs.West.Actuator.c_g needs Commands.UpstreamEnteringTLGreen;
    supervisor invariant .North.Downstream.LeavingTLs.East.Actuator.c_r needs Commands.DownstreamLeavingTLRed;
    supervisor invariant .North.Downstream.LeavingTLs.West.Actuator.c_r needs Commands.DownstreamLeavingTLRed;
    supervisor invariant .North.Upstream.LeavingTLs.East.Actuator.c_r needs Commands.UpstreamLeavingTLRed;
    supervisor invariant .North.Upstream.LeavingTLs.West.Actuator.c_r needs Commands.UpstreamLeavingTLRed;
    supervisor invariant .North.Downstream.LeavingTLs.East.Actuator.c_g needs Commands.DownstreamLeavingTLGreen;
    supervisor invariant .North.Downstream.LeavingTLs.West.Actuator.c_g needs Commands.DownstreamLeavingTLGreen;
    supervisor invariant .North.Upstream.LeavingTLs.East.Actuator.c_g needs Commands.UpstreamLeavingTLGreen;
    supervisor invariant .North.Upstream.LeavingTLs.West.Actuator.c_g needs Commands.UpstreamLeavingTLGreen;
  end
  group South:
    group Upstream:
      group Gates:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Upstream.Gates.East.Actuator.c_open goto Opening;
              edge .South.Upstream.Gates.East.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Upstream.Gates.East.Actuator.c_emergencyStop, .South.Upstream.Gates.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Upstream.Gates.East.Actuator.c_emergencyStop, .South.Upstream.Gates.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Upstream.Gates.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Upstream.Gates.East.Sensor.u_closed_on goto Closed;
              edge .South.Upstream.Gates.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Upstream.Gates.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Upstream.Gates.East.Sensor.u_open_on, .South.Upstream.Gates.East.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Upstream.Gates.East.Sensor.u_closed_on, .South.Upstream.Gates.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Upstream.Gates.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Upstream.Gates.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Upstream.Gates.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Upstream.Gates.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Upstream.Gates.West.Actuator.c_open goto Opening;
              edge .South.Upstream.Gates.West.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Upstream.Gates.West.Actuator.c_emergencyStop, .South.Upstream.Gates.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Upstream.Gates.West.Actuator.c_emergencyStop, .South.Upstream.Gates.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Upstream.Gates.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Upstream.Gates.West.Sensor.u_closed_on goto Closed;
              edge .South.Upstream.Gates.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Upstream.Gates.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Upstream.Gates.West.Sensor.u_open_on, .South.Upstream.Gates.West.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Upstream.Gates.West.Sensor.u_closed_on, .South.Upstream.Gates.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Upstream.Gates.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Upstream.Gates.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Upstream.Gates.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Upstream.Gates.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group Paddles:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Upstream.Paddles.East.Actuator.c_open goto Opening;
              edge .South.Upstream.Paddles.East.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Upstream.Paddles.East.Actuator.c_emergencyStop, .South.Upstream.Paddles.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Upstream.Paddles.East.Actuator.c_emergencyStop, .South.Upstream.Paddles.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Upstream.Paddles.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Upstream.Paddles.East.Sensor.u_closed_on goto Closed;
              edge .South.Upstream.Paddles.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Upstream.Paddles.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Upstream.Paddles.East.Sensor.u_open_on, .South.Upstream.Paddles.East.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Upstream.Paddles.East.Sensor.u_closed_on, .South.Upstream.Paddles.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Upstream.Paddles.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Upstream.Paddles.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Upstream.Paddles.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Upstream.Paddles.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Upstream.Paddles.West.Actuator.c_open goto Opening;
              edge .South.Upstream.Paddles.West.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Upstream.Paddles.West.Actuator.c_emergencyStop, .South.Upstream.Paddles.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Upstream.Paddles.West.Actuator.c_emergencyStop, .South.Upstream.Paddles.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Upstream.Paddles.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Upstream.Paddles.West.Sensor.u_closed_on goto Closed;
              edge .South.Upstream.Paddles.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Upstream.Paddles.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Upstream.Paddles.West.Sensor.u_open_on, .South.Upstream.Paddles.West.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Upstream.Paddles.West.Sensor.u_closed_on, .South.Upstream.Paddles.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Upstream.Paddles.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Upstream.Paddles.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Upstream.Paddles.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Upstream.Paddles.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group EnteringTLs:
        alg bool RedRed = East.RedRed and West.RedRed;
        alg bool Red = East.Red and West.Red;
        alg bool RedGreen = East.RedGreen and West.RedGreen;
        alg bool Green = East.Green and West.Green;
        alg bool RedOrRedRed = Red or RedRed;
        group East:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .South.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.East.Actuator.c_rr goto RedRed;
              edge .South.Upstream.EnteringTLs.East.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .South.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
              edge .South.Upstream.EnteringTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .South.Upstream.EnteringTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.East.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.East.SensorR1.u_on when On;
              edge .South.Upstream.EnteringTLs.East.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.East.SensorG.u_on when On;
              edge .South.Upstream.EnteringTLs.East.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.East.SensorR2.u_on when On;
              edge .South.Upstream.EnteringTLs.East.SensorR2.u_off when Off;
          end
        end
        group West:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .South.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.West.Actuator.c_rr goto RedRed;
              edge .South.Upstream.EnteringTLs.West.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .South.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
              edge .South.Upstream.EnteringTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .South.Upstream.EnteringTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.EnteringTLs.West.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.West.SensorR1.u_on when On;
              edge .South.Upstream.EnteringTLs.West.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.West.SensorG.u_on when On;
              edge .South.Upstream.EnteringTLs.West.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Upstream.EnteringTLs.West.SensorR2.u_on when On;
              edge .South.Upstream.EnteringTLs.West.SensorR2.u_off when Off;
          end
        end
      end
      group LeavingTLs:
        alg bool Red = East.Red and West.Red;
        alg bool Green = East.Green and West.Green;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .South.Upstream.LeavingTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.LeavingTLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.LeavingTLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.LeavingTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.LeavingTLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.East.SensorR.u_on when On;
              edge .South.Upstream.LeavingTLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.East.SensorG.u_on when On;
              edge .South.Upstream.LeavingTLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .South.Upstream.LeavingTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.LeavingTLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.LeavingTLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Upstream.LeavingTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Upstream.LeavingTLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.West.SensorR.u_on when On;
              edge .South.Upstream.LeavingTLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .South.Upstream.LeavingTLs.West.SensorG.u_on when On;
              edge .South.Upstream.LeavingTLs.West.SensorG.u_off when Off;
          end
        end
      end
      plant automaton EqualWaterSensor:
        alg bool InitialEqual = false;
        location Unequal:
          initial not InitialEqual;
          marked not InitialEqual;
          edge .South.Upstream.EqualWaterSensor.u_on goto Equal;
        location Equal:
          initial InitialEqual;
          marked InitialEqual;
          edge .South.Upstream.EqualWaterSensor.u_off goto Unequal;
      end
    end
    group Downstream:
      group Gates:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Downstream.Gates.East.Actuator.c_open goto Opening;
              edge .South.Downstream.Gates.East.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Downstream.Gates.East.Actuator.c_emergencyStop, .South.Downstream.Gates.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Downstream.Gates.East.Actuator.c_emergencyStop, .South.Downstream.Gates.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Downstream.Gates.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Downstream.Gates.East.Sensor.u_closed_on goto Closed;
              edge .South.Downstream.Gates.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Downstream.Gates.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Downstream.Gates.East.Sensor.u_open_on, .South.Downstream.Gates.East.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Downstream.Gates.East.Sensor.u_closed_on, .South.Downstream.Gates.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Downstream.Gates.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Downstream.Gates.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Downstream.Gates.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Downstream.Gates.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Downstream.Gates.West.Actuator.c_open goto Opening;
              edge .South.Downstream.Gates.West.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Downstream.Gates.West.Actuator.c_emergencyStop, .South.Downstream.Gates.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Downstream.Gates.West.Actuator.c_emergencyStop, .South.Downstream.Gates.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Downstream.Gates.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Downstream.Gates.West.Sensor.u_closed_on goto Closed;
              edge .South.Downstream.Gates.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Downstream.Gates.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Downstream.Gates.West.Sensor.u_open_on, .South.Downstream.Gates.West.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Downstream.Gates.West.Sensor.u_closed_on, .South.Downstream.Gates.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Downstream.Gates.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Downstream.Gates.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Downstream.Gates.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Downstream.Gates.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group Paddles:
        alg bool Open = East.Open and West.Open;
        alg bool Closed = East.Closed and West.Closed;
        group East:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Downstream.Paddles.East.Actuator.c_open goto Opening;
              edge .South.Downstream.Paddles.East.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Downstream.Paddles.East.Actuator.c_emergencyStop, .South.Downstream.Paddles.East.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Downstream.Paddles.East.Actuator.c_emergencyStop, .South.Downstream.Paddles.East.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Downstream.Paddles.East.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Downstream.Paddles.East.Sensor.u_closed_on goto Closed;
              edge .South.Downstream.Paddles.East.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Downstream.Paddles.East.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Downstream.Paddles.East.Sensor.u_open_on, .South.Downstream.Paddles.East.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Downstream.Paddles.East.Sensor.u_closed_on, .South.Downstream.Paddles.East.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Downstream.Paddles.East.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Downstream.Paddles.East.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Downstream.Paddles.East.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Downstream.Paddles.East.Actuator.c_close needs not Sensor.Closed;
        end
        group West:
          alg bool Moving = not Actuator.Rest;
          alg bool Closed = Actuator.Rest and Sensor.Closed;
          alg bool Open = Actuator.Rest and Sensor.Open;
          plant automaton Actuator:
            location Rest:
              initial;
              marked;
              edge .South.Downstream.Paddles.West.Actuator.c_open goto Opening;
              edge .South.Downstream.Paddles.West.Actuator.c_close goto Closing;
            location Opening:
              edge .South.Downstream.Paddles.West.Actuator.c_emergencyStop, .South.Downstream.Paddles.West.Actuator.c_endStopOpening goto Rest;
            location Closing:
              edge .South.Downstream.Paddles.West.Actuator.c_emergencyStop, .South.Downstream.Paddles.West.Actuator.c_endStopClosing goto Rest;
          end
          plant automaton Sensor:
            alg bool InitialLocationClosed = true;
            location Closed:
              initial InitialLocationClosed;
              marked InitialLocationClosed;
              edge .South.Downstream.Paddles.West.Sensor.u_closed_off goto Intermediate;
            location Intermediate:
              edge .South.Downstream.Paddles.West.Sensor.u_closed_on goto Closed;
              edge .South.Downstream.Paddles.West.Sensor.u_open_on goto Open;
            location Open:
              initial not InitialLocationClosed;
              marked not InitialLocationClosed;
              edge .South.Downstream.Paddles.West.Sensor.u_open_off goto Intermediate;
          end
          plant automaton Dynamics:
            location:
              initial;
              marked;
              edge .South.Downstream.Paddles.West.Sensor.u_open_on, .South.Downstream.Paddles.West.Sensor.u_closed_off when Actuator.Opening;
              edge .South.Downstream.Paddles.West.Sensor.u_closed_on, .South.Downstream.Paddles.West.Sensor.u_open_off when Actuator.Closing;
          end
          supervisor invariant .South.Downstream.Paddles.West.Actuator.c_endStopOpening needs Sensor.Open;
          supervisor invariant .South.Downstream.Paddles.West.Actuator.c_endStopClosing needs Sensor.Closed;
          supervisor invariant .South.Downstream.Paddles.West.Actuator.c_open needs not Sensor.Open;
          supervisor invariant .South.Downstream.Paddles.West.Actuator.c_close needs not Sensor.Closed;
        end
      end
      group EnteringTLs:
        alg bool RedRed = East.RedRed and West.RedRed;
        alg bool Red = East.Red and West.Red;
        alg bool RedGreen = East.RedGreen and West.RedGreen;
        alg bool Green = East.Green and West.Green;
        alg bool RedOrRedRed = Red or RedRed;
        group East:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .South.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.East.Actuator.c_rr goto RedRed;
              edge .South.Downstream.EnteringTLs.East.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .South.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
              edge .South.Downstream.EnteringTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .South.Downstream.EnteringTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.East.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.East.SensorR1.u_on when On;
              edge .South.Downstream.EnteringTLs.East.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.East.SensorG.u_on when On;
              edge .South.Downstream.EnteringTLs.East.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.East.SensorR2.u_on when On;
              edge .South.Downstream.EnteringTLs.East.SensorR2.u_off when Off;
          end
        end
        group West:
          alg bool RedRed = Actuator.RedRed and SensorR1.On and SensorG.Off and SensorR2.On;
          alg bool Red = Actuator.Red and SensorR1.On and SensorG.Off and SensorR2.Off;
          alg bool RedGreen = Actuator.RedGreen and SensorR1.On and SensorG.On and SensorR2.Off;
          alg bool Green = Actuator.Green and SensorR1.Off and SensorG.On and SensorR2.Off;
          plant automaton Actuator:
            location RedRed:
              marked;
              edge .South.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
            location Red:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.West.Actuator.c_rr goto RedRed;
              edge .South.Downstream.EnteringTLs.West.Actuator.c_rg goto RedGreen;
            location RedGreen:
              edge .South.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
              edge .South.Downstream.EnteringTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .South.Downstream.EnteringTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR1:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorR1.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorR1.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorG.u_off goto Off;
          end
          plant automaton SensorR2:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorR2.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.EnteringTLs.West.SensorR2.u_off goto Off;
          end
          plant automaton DynamicsR1:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.West.SensorR1.u_on when On;
              edge .South.Downstream.EnteringTLs.West.SensorR1.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = Actuator.Green or Actuator.RedGreen;
            alg bool Off = Actuator.Red or Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.West.SensorG.u_on when On;
              edge .South.Downstream.EnteringTLs.West.SensorG.u_off when Off;
          end
          plant automaton DynamicsR2:
            alg bool On = Actuator.RedRed;
            alg bool Off = not Actuator.RedRed;
            location:
              initial;
              marked;
              edge .South.Downstream.EnteringTLs.West.SensorR2.u_on when On;
              edge .South.Downstream.EnteringTLs.West.SensorR2.u_off when Off;
          end
        end
      end
      group LeavingTLs:
        alg bool Red = East.Red and West.Red;
        alg bool Green = East.Green and West.Green;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.East.Actuator.c_g goto Green;
            location Green:
              edge .South.Downstream.LeavingTLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.LeavingTLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.LeavingTLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.LeavingTLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.LeavingTLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.East.SensorR.u_on when On;
              edge .South.Downstream.LeavingTLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.East.SensorG.u_on when On;
              edge .South.Downstream.LeavingTLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.West.Actuator.c_g goto Green;
            location Green:
              edge .South.Downstream.LeavingTLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.LeavingTLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.LeavingTLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .South.Downstream.LeavingTLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .South.Downstream.LeavingTLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.West.SensorR.u_on when On;
              edge .South.Downstream.LeavingTLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .South.Downstream.LeavingTLs.West.SensorG.u_on when On;
              edge .South.Downstream.LeavingTLs.West.SensorG.u_off when Off;
          end
        end
      end
      plant automaton EqualWaterSensor:
        alg bool InitialEqual = false;
        location Unequal:
          initial not InitialEqual;
          marked not InitialEqual;
          edge .South.Downstream.EqualWaterSensor.u_on goto Equal;
        location Equal:
          initial InitialEqual;
          marked InitialEqual;
          edge .South.Downstream.EqualWaterSensor.u_off goto Unequal;
      end
    end
    plant automaton EmergencyStop:
      location Inactive:
        initial;
        marked;
        edge .South.EmergencyStop.u_activate goto Active;
      location Active:
        edge .South.EmergencyStop.u_deactivate goto Inactive;
    end
    plant automaton Commands:
      monitor;
      location NoCommand:
        initial;
        marked;
        edge .South.Commands.DownstreamGateOpen_act goto DownstreamGateOpen;
        edge .South.Commands.DownstreamGateClose_act goto DownstreamGateClose;
        edge .South.Commands.DownstreamGateStop_act goto DownstreamGateStop;
        edge .South.Commands.DownstreamPaddleOpen_act goto DownstreamPaddleOpen;
        edge .South.Commands.DownstreamPaddleClose_act goto DownstreamPaddleClose;
        edge .South.Commands.DownstreamPaddleStop_act goto DownstreamPaddleStop;
        edge .South.Commands.DownstreamEnteringTLRedRed_act goto DownstreamEnteringTLRedRed;
        edge .South.Commands.DownstreamEnteringTLRed_act goto DownstreamEnteringTLRed;
        edge .South.Commands.DownstreamEnteringTLRedGreen_act goto DownstreamEnteringTLRedGreen;
        edge .South.Commands.DownstreamEnteringTLGreen_act goto DownstreamEnteringTLGreen;
        edge .South.Commands.DownstreamLeavingTLRed_act goto DownstreamLeavingTLRed;
        edge .South.Commands.DownstreamLeavingTLGreen_act goto DownstreamLeavingTLGreen;
        edge .South.Commands.UpstreamGateOpen_act goto UpstreamGateOpen;
        edge .South.Commands.UpstreamGateClose_act goto UpstreamGateClose;
        edge .South.Commands.UpstreamGateStop_act goto UpstreamGateStop;
        edge .South.Commands.UpstreamPaddleOpen_act goto UpstreamPaddleOpen;
        edge .South.Commands.UpstreamPaddleClose_act goto UpstreamPaddleClose;
        edge .South.Commands.UpstreamPaddleStop_act goto UpstreamPaddleStop;
        edge .South.Commands.UpstreamEnteringTLRedRed_act goto UpstreamEnteringTLRedRed;
        edge .South.Commands.UpstreamEnteringTLRed_act goto UpstreamEnteringTLRed;
        edge .South.Commands.UpstreamEnteringTLRedGreen_act goto UpstreamEnteringTLRedGreen;
        edge .South.Commands.UpstreamEnteringTLGreen_act goto UpstreamEnteringTLGreen;
        edge .South.Commands.UpstreamLeavingTLRed_act goto UpstreamLeavingTLRed;
        edge .South.Commands.UpstreamLeavingTLGreen_act goto UpstreamLeavingTLGreen;
      location DownstreamGateOpen:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamGateClose:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamGateStop:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleOpen:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleClose:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamPaddleStop:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRedRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLRedGreen:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamEnteringTLGreen:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamLeavingTLRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location DownstreamLeavingTLGreen:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamGateOpen:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamGateClose:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamGateStop:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleOpen:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleClose:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamPaddleStop:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRedRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLRedGreen:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamEnteringTLGreen:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamLeavingTLRed:
        edge .South.Commands.Deactivate goto NoCommand;
      location UpstreamLeavingTLGreen:
        edge .South.Commands.Deactivate goto NoCommand;
    end
    supervisor invariant not Downstream.Paddles.Closed disables .South.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .South.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .South.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .South.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .South.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .South.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .South.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .South.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant Downstream.EqualWaterSensor.Unequal disables .South.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant Downstream.EqualWaterSensor.Unequal disables .South.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant Upstream.EqualWaterSensor.Unequal disables .South.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant Upstream.EqualWaterSensor.Unequal disables .South.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .South.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant not Downstream.Paddles.Closed disables .South.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .South.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant not Upstream.Paddles.Closed disables .South.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .South.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant not Downstream.Gates.Closed disables .South.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .South.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant not Upstream.Gates.Closed disables .South.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant not Downstream.LeavingTLs.Red disables .South.Downstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.LeavingTLs.Red disables .South.Downstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.LeavingTLs.Red disables .South.Upstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.LeavingTLs.Red disables .South.Upstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .South.Downstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .South.Downstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .South.Upstream.EnteringTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .South.Upstream.EnteringTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .South.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .South.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .South.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .South.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant not Downstream.LeavingTLs.Red disables .South.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant not Downstream.LeavingTLs.Red disables .South.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant not Upstream.LeavingTLs.Red disables .South.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant not Upstream.LeavingTLs.Red disables .South.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Gates.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Gates.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Gates.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Gates.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Gates.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Gates.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Gates.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Paddles.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Paddles.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Paddles.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Downstream.Paddles.West.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Paddles.East.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Paddles.East.Actuator.c_close;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Paddles.West.Actuator.c_open;
    supervisor invariant EmergencyStop.Active disables .South.Upstream.Paddles.West.Actuator.c_close;
    supervisor invariant .South.Downstream.Gates.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamGateStop;
    supervisor invariant .South.Downstream.Gates.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamGateStop;
    supervisor invariant .South.Upstream.Gates.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamGateStop;
    supervisor invariant .South.Upstream.Gates.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamGateStop;
    supervisor invariant .South.Downstream.Paddles.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamPaddleStop;
    supervisor invariant .South.Downstream.Paddles.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.DownstreamPaddleStop;
    supervisor invariant .South.Upstream.Paddles.East.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamPaddleStop;
    supervisor invariant .South.Upstream.Paddles.West.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.UpstreamPaddleStop;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .South.Downstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.EnteringTLs.RedOrRedRed disables .South.Downstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .South.Upstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.EnteringTLs.RedOrRedRed disables .South.Upstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .South.Downstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Downstream.Gates.Open disables .South.Downstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .South.Upstream.LeavingTLs.East.Actuator.c_g;
    supervisor invariant not Upstream.Gates.Open disables .South.Upstream.LeavingTLs.West.Actuator.c_g;
    supervisor invariant .South.Downstream.Gates.East.Actuator.c_open needs Commands.DownstreamGateOpen;
    supervisor invariant .South.Downstream.Gates.West.Actuator.c_open needs Commands.DownstreamGateOpen;
    supervisor invariant .South.Upstream.Gates.East.Actuator.c_open needs Commands.UpstreamGateOpen;
    supervisor invariant .South.Upstream.Gates.West.Actuator.c_open needs Commands.UpstreamGateOpen;
    supervisor invariant .South.Downstream.Gates.East.Actuator.c_close needs Commands.DownstreamGateClose;
    supervisor invariant .South.Downstream.Gates.West.Actuator.c_close needs Commands.DownstreamGateClose;
    supervisor invariant .South.Upstream.Gates.East.Actuator.c_close needs Commands.UpstreamGateClose;
    supervisor invariant .South.Upstream.Gates.West.Actuator.c_close needs Commands.UpstreamGateClose;
    supervisor invariant .South.Downstream.Paddles.East.Actuator.c_open needs Commands.DownstreamPaddleOpen;
    supervisor invariant .South.Downstream.Paddles.West.Actuator.c_open needs Commands.DownstreamPaddleOpen;
    supervisor invariant .South.Upstream.Paddles.East.Actuator.c_open needs Commands.UpstreamPaddleOpen;
    supervisor invariant .South.Upstream.Paddles.West.Actuator.c_open needs Commands.UpstreamPaddleOpen;
    supervisor invariant .South.Downstream.Paddles.East.Actuator.c_close needs Commands.DownstreamPaddleClose;
    supervisor invariant .South.Downstream.Paddles.West.Actuator.c_close needs Commands.DownstreamPaddleClose;
    supervisor invariant .South.Upstream.Paddles.East.Actuator.c_close needs Commands.UpstreamPaddleClose;
    supervisor invariant .South.Upstream.Paddles.West.Actuator.c_close needs Commands.UpstreamPaddleClose;
    supervisor invariant .South.Downstream.EnteringTLs.East.Actuator.c_rr needs Commands.DownstreamEnteringTLRedRed;
    supervisor invariant .South.Downstream.EnteringTLs.West.Actuator.c_rr needs Commands.DownstreamEnteringTLRedRed;
    supervisor invariant .South.Upstream.EnteringTLs.East.Actuator.c_rr needs Commands.UpstreamEnteringTLRedRed;
    supervisor invariant .South.Upstream.EnteringTLs.West.Actuator.c_rr needs Commands.UpstreamEnteringTLRedRed;
    supervisor invariant .South.Downstream.EnteringTLs.East.Actuator.c_r needs Commands.DownstreamEnteringTLRed;
    supervisor invariant .South.Downstream.EnteringTLs.West.Actuator.c_r needs Commands.DownstreamEnteringTLRed;
    supervisor invariant .South.Upstream.EnteringTLs.East.Actuator.c_r needs Commands.UpstreamEnteringTLRed;
    supervisor invariant .South.Upstream.EnteringTLs.West.Actuator.c_r needs Commands.UpstreamEnteringTLRed;
    supervisor invariant .South.Downstream.EnteringTLs.East.Actuator.c_rg needs Commands.DownstreamEnteringTLRedGreen;
    supervisor invariant .South.Downstream.EnteringTLs.West.Actuator.c_rg needs Commands.DownstreamEnteringTLRedGreen;
    supervisor invariant .South.Upstream.EnteringTLs.East.Actuator.c_rg needs Commands.UpstreamEnteringTLRedGreen;
    supervisor invariant .South.Upstream.EnteringTLs.West.Actuator.c_rg needs Commands.UpstreamEnteringTLRedGreen;
    supervisor invariant .South.Downstream.EnteringTLs.East.Actuator.c_g needs Commands.DownstreamEnteringTLGreen;
    supervisor invariant .South.Downstream.EnteringTLs.West.Actuator.c_g needs Commands.DownstreamEnteringTLGreen;
    supervisor invariant .South.Upstream.EnteringTLs.East.Actuator.c_g needs Commands.UpstreamEnteringTLGreen;
    supervisor invariant .South.Upstream.EnteringTLs.West.Actuator.c_g needs Commands.UpstreamEnteringTLGreen;
    supervisor invariant .South.Downstream.LeavingTLs.East.Actuator.c_r needs Commands.DownstreamLeavingTLRed;
    supervisor invariant .South.Downstream.LeavingTLs.West.Actuator.c_r needs Commands.DownstreamLeavingTLRed;
    supervisor invariant .South.Upstream.LeavingTLs.East.Actuator.c_r needs Commands.UpstreamLeavingTLRed;
    supervisor invariant .South.Upstream.LeavingTLs.West.Actuator.c_r needs Commands.UpstreamLeavingTLRed;
    supervisor invariant .South.Downstream.LeavingTLs.East.Actuator.c_g needs Commands.DownstreamLeavingTLGreen;
    supervisor invariant .South.Downstream.LeavingTLs.West.Actuator.c_g needs Commands.DownstreamLeavingTLGreen;
    supervisor invariant .South.Upstream.LeavingTLs.East.Actuator.c_g needs Commands.UpstreamLeavingTLGreen;
    supervisor invariant .South.Upstream.LeavingTLs.West.Actuator.c_g needs Commands.UpstreamLeavingTLGreen;
  end
  group Barrier:
    group Downstream:
      group TLs:
        alg bool Red = East.Red and West.Red;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.East.Actuator.c_g goto Green;
            location Green:
              edge .Barrier.Downstream.TLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Downstream.TLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Downstream.TLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Downstream.TLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Downstream.TLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.East.SensorR.u_on when On;
              edge .Barrier.Downstream.TLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.East.SensorG.u_on when On;
              edge .Barrier.Downstream.TLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.West.Actuator.c_g goto Green;
            location Green:
              edge .Barrier.Downstream.TLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Downstream.TLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Downstream.TLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Downstream.TLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Downstream.TLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.West.SensorR.u_on when On;
              edge .Barrier.Downstream.TLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .Barrier.Downstream.TLs.West.SensorG.u_on when On;
              edge .Barrier.Downstream.TLs.West.SensorG.u_off when Off;
          end
        end
      end
    end
    group Upstream:
      group TLs:
        alg bool Red = East.Red and West.Red;
        group East:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.East.Actuator.c_g goto Green;
            location Green:
              edge .Barrier.Upstream.TLs.East.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Upstream.TLs.East.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Upstream.TLs.East.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Upstream.TLs.East.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Upstream.TLs.East.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.East.SensorR.u_on when On;
              edge .Barrier.Upstream.TLs.East.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.East.SensorG.u_on when On;
              edge .Barrier.Upstream.TLs.East.SensorG.u_off when Off;
          end
        end
        group West:
          alg bool Red = Actuator.Red and SensorR.On and SensorG.Off;
          alg bool Green = Actuator.Green and SensorR.Off and SensorG.On;
          plant automaton Actuator:
            location Red:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.West.Actuator.c_g goto Green;
            location Green:
              edge .Barrier.Upstream.TLs.West.Actuator.c_r goto Red;
          end
          plant automaton SensorR:
            alg bool InitialOn = true;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Upstream.TLs.West.SensorR.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Upstream.TLs.West.SensorR.u_off goto Off;
          end
          plant automaton SensorG:
            alg bool InitialOn = false;
            location Off:
              initial not InitialOn;
              marked not InitialOn;
              edge .Barrier.Upstream.TLs.West.SensorG.u_on goto On;
            location On:
              initial InitialOn;
              marked InitialOn;
              edge .Barrier.Upstream.TLs.West.SensorG.u_off goto Off;
          end
          plant automaton DynamicsR:
            alg bool On = not Actuator.Green;
            alg bool Off = Actuator.Green;
            location:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.West.SensorR.u_on when On;
              edge .Barrier.Upstream.TLs.West.SensorR.u_off when Off;
          end
          plant automaton DynamicsG:
            alg bool On = not Actuator.Red;
            alg bool Off = Actuator.Red;
            location:
              initial;
              marked;
              edge .Barrier.Upstream.TLs.West.SensorG.u_on when On;
              edge .Barrier.Upstream.TLs.West.SensorG.u_off when Off;
          end
        end
      end
    end
    group Barrier:
      alg bool Moving = not Actuator.Rest;
      alg bool Closed = Actuator.Rest and Sensor.Closed;
      alg bool Open = Actuator.Rest and Sensor.Open;
      plant automaton Actuator:
        location Rest:
          initial;
          marked;
          edge .Barrier.Barrier.Actuator.c_open goto Opening;
          edge .Barrier.Barrier.Actuator.c_close goto Closing;
        location Opening:
          edge .Barrier.Barrier.Actuator.c_emergencyStop, .Barrier.Barrier.Actuator.c_endStopOpening goto Rest;
        location Closing:
          edge .Barrier.Barrier.Actuator.c_emergencyStop, .Barrier.Barrier.Actuator.c_endStopClosing goto Rest;
      end
      plant automaton Sensor:
        alg bool InitialLocationClosed = true;
        location Closed:
          initial InitialLocationClosed;
          marked InitialLocationClosed;
          edge .Barrier.Barrier.Sensor.u_closed_off goto Intermediate;
        location Intermediate:
          edge .Barrier.Barrier.Sensor.u_closed_on goto Closed;
          edge .Barrier.Barrier.Sensor.u_open_on goto Open;
        location Open:
          initial not InitialLocationClosed;
          marked not InitialLocationClosed;
          edge .Barrier.Barrier.Sensor.u_open_off goto Intermediate;
      end
      plant automaton Dynamics:
        location:
          initial;
          marked;
          edge .Barrier.Barrier.Sensor.u_open_on, .Barrier.Barrier.Sensor.u_closed_off when Actuator.Opening;
          edge .Barrier.Barrier.Sensor.u_closed_on, .Barrier.Barrier.Sensor.u_open_off when Actuator.Closing;
      end
      supervisor invariant .Barrier.Barrier.Actuator.c_endStopOpening needs Sensor.Open;
      supervisor invariant .Barrier.Barrier.Actuator.c_endStopClosing needs Sensor.Closed;
      supervisor invariant .Barrier.Barrier.Actuator.c_open needs not Sensor.Open;
      supervisor invariant .Barrier.Barrier.Actuator.c_close needs not Sensor.Closed;
    end
    plant automaton EmergencyStop:
      location Inactive:
        initial;
        marked;
        edge .Barrier.EmergencyStop.u_activate goto Active;
      location Active:
        edge .Barrier.EmergencyStop.u_deactivate goto Inactive;
    end
    plant automaton Commands:
      monitor;
      location NoCommand:
        initial;
        marked;
        edge .Barrier.Commands.BarrierOpen_act goto BarrierOpen;
        edge .Barrier.Commands.BarrierClose_act goto BarrierClose;
        edge .Barrier.Commands.BarrierStop_act goto BarrierStop;
        edge .Barrier.Commands.DownstreamTLRed_act goto DownstreamTLRed;
        edge .Barrier.Commands.DownstreamTLGreen_act goto DownstreamTLGreen;
        edge .Barrier.Commands.UpstreamTLRed_act goto UpstreamTLRed;
        edge .Barrier.Commands.UpstreamTLGreen_act goto UpstreamTLGreen;
      location BarrierOpen:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location BarrierClose:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location BarrierStop:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location DownstreamTLRed:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location DownstreamTLGreen:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location UpstreamTLRed:
        edge .Barrier.Commands.Deactivate goto NoCommand;
      location UpstreamTLGreen:
        edge .Barrier.Commands.Deactivate goto NoCommand;
    end
    supervisor invariant .Barrier.Barrier.Actuator.c_close needs Downstream.TLs.Red and Upstream.TLs.Red;
    supervisor invariant .Barrier.Downstream.TLs.East.Actuator.c_g needs Barrier.Open;
    supervisor invariant .Barrier.Downstream.TLs.West.Actuator.c_g needs Barrier.Open;
    supervisor invariant .Barrier.Upstream.TLs.East.Actuator.c_g needs Barrier.Open;
    supervisor invariant .Barrier.Upstream.TLs.West.Actuator.c_g needs Barrier.Open;
    supervisor invariant .Barrier.Downstream.TLs.East.Actuator.c_g needs Commands.DownstreamTLGreen;
    supervisor invariant .Barrier.Downstream.TLs.West.Actuator.c_g needs Commands.DownstreamTLGreen;
    supervisor invariant .Barrier.Downstream.TLs.East.Actuator.c_r needs Commands.DownstreamTLRed;
    supervisor invariant .Barrier.Downstream.TLs.West.Actuator.c_r needs Commands.DownstreamTLRed;
    supervisor invariant .Barrier.Upstream.TLs.East.Actuator.c_g needs Commands.UpstreamTLGreen;
    supervisor invariant .Barrier.Upstream.TLs.West.Actuator.c_g needs Commands.UpstreamTLGreen;
    supervisor invariant .Barrier.Upstream.TLs.East.Actuator.c_r needs Commands.UpstreamTLRed;
    supervisor invariant .Barrier.Upstream.TLs.West.Actuator.c_r needs Commands.UpstreamTLRed;
    supervisor invariant .Barrier.Barrier.Actuator.c_open needs Commands.BarrierOpen;
    supervisor invariant .Barrier.Barrier.Actuator.c_close needs Commands.BarrierClose;
    supervisor invariant .Barrier.Barrier.Actuator.c_emergencyStop needs EmergencyStop.Active or Commands.BarrierStop;
  end
  supervisor automaton sup:
    alphabet .North.Upstream.Gates.East.Actuator.c_open, .North.Upstream.Gates.East.Actuator.c_close, .North.Upstream.Gates.East.Actuator.c_emergencyStop, .North.Upstream.Gates.East.Actuator.c_endStopOpening, .North.Upstream.Gates.East.Actuator.c_endStopClosing, .North.Upstream.Gates.West.Actuator.c_open, .North.Upstream.Gates.West.Actuator.c_close, .North.Upstream.Gates.West.Actuator.c_emergencyStop, .North.Upstream.Gates.West.Actuator.c_endStopOpening, .North.Upstream.Gates.West.Actuator.c_endStopClosing, .North.Upstream.Paddles.East.Actuator.c_open, .North.Upstream.Paddles.East.Actuator.c_close, .North.Upstream.Paddles.East.Actuator.c_emergencyStop, .North.Upstream.Paddles.East.Actuator.c_endStopOpening, .North.Upstream.Paddles.East.Actuator.c_endStopClosing, .North.Upstream.Paddles.West.Actuator.c_open, .North.Upstream.Paddles.West.Actuator.c_close, .North.Upstream.Paddles.West.Actuator.c_emergencyStop, .North.Upstream.Paddles.West.Actuator.c_endStopOpening, .North.Upstream.Paddles.West.Actuator.c_endStopClosing, .North.Upstream.EnteringTLs.East.Actuator.c_r, .North.Upstream.EnteringTLs.East.Actuator.c_rr, .North.Upstream.EnteringTLs.East.Actuator.c_rg, .North.Upstream.EnteringTLs.East.Actuator.c_g, .North.Upstream.EnteringTLs.West.Actuator.c_r, .North.Upstream.EnteringTLs.West.Actuator.c_rr, .North.Upstream.EnteringTLs.West.Actuator.c_rg, .North.Upstream.EnteringTLs.West.Actuator.c_g, .North.Upstream.LeavingTLs.East.Actuator.c_g, .North.Upstream.LeavingTLs.East.Actuator.c_r, .North.Upstream.LeavingTLs.West.Actuator.c_g, .North.Upstream.LeavingTLs.West.Actuator.c_r, .North.Downstream.Gates.East.Actuator.c_open, .North.Downstream.Gates.East.Actuator.c_close, .North.Downstream.Gates.East.Actuator.c_emergencyStop, .North.Downstream.Gates.East.Actuator.c_endStopOpening, .North.Downstream.Gates.East.Actuator.c_endStopClosing, .North.Downstream.Gates.West.Actuator.c_open, .North.Downstream.Gates.West.Actuator.c_close, .North.Downstream.Gates.West.Actuator.c_emergencyStop, .North.Downstream.Gates.West.Actuator.c_endStopOpening, .North.Downstream.Gates.West.Actuator.c_endStopClosing, .North.Downstream.Paddles.East.Actuator.c_open, .North.Downstream.Paddles.East.Actuator.c_close, .North.Downstream.Paddles.East.Actuator.c_emergencyStop, .North.Downstream.Paddles.East.Actuator.c_endStopOpening, .North.Downstream.Paddles.East.Actuator.c_endStopClosing, .North.Downstream.Paddles.West.Actuator.c_open, .North.Downstream.Paddles.West.Actuator.c_close, .North.Downstream.Paddles.West.Actuator.c_emergencyStop, .North.Downstream.Paddles.West.Actuator.c_endStopOpening, .North.Downstream.Paddles.West.Actuator.c_endStopClosing, .North.Downstream.EnteringTLs.East.Actuator.c_r, .North.Downstream.EnteringTLs.East.Actuator.c_rr, .North.Downstream.EnteringTLs.East.Actuator.c_rg, .North.Downstream.EnteringTLs.East.Actuator.c_g, .North.Downstream.EnteringTLs.West.Actuator.c_r, .North.Downstream.EnteringTLs.West.Actuator.c_rr, .North.Downstream.EnteringTLs.West.Actuator.c_rg, .North.Downstream.EnteringTLs.West.Actuator.c_g, .North.Downstream.LeavingTLs.East.Actuator.c_g, .North.Downstream.LeavingTLs.East.Actuator.c_r, .North.Downstream.LeavingTLs.West.Actuator.c_g, .North.Downstream.LeavingTLs.West.Actuator.c_r, .South.Upstream.Gates.East.Actuator.c_open, .South.Upstream.Gates.East.Actuator.c_close, .South.Upstream.Gates.East.Actuator.c_emergencyStop, .South.Upstream.Gates.East.Actuator.c_endStopOpening, .South.Upstream.Gates.East.Actuator.c_endStopClosing, .South.Upstream.Gates.West.Actuator.c_open, .South.Upstream.Gates.West.Actuator.c_close, .South.Upstream.Gates.West.Actuator.c_emergencyStop, .South.Upstream.Gates.West.Actuator.c_endStopOpening, .South.Upstream.Gates.West.Actuator.c_endStopClosing, .South.Upstream.Paddles.East.Actuator.c_open, .South.Upstream.Paddles.East.Actuator.c_close, .South.Upstream.Paddles.East.Actuator.c_emergencyStop, .South.Upstream.Paddles.East.Actuator.c_endStopOpening, .South.Upstream.Paddles.East.Actuator.c_endStopClosing, .South.Upstream.Paddles.West.Actuator.c_open, .South.Upstream.Paddles.West.Actuator.c_close, .South.Upstream.Paddles.West.Actuator.c_emergencyStop, .South.Upstream.Paddles.West.Actuator.c_endStopOpening, .South.Upstream.Paddles.West.Actuator.c_endStopClosing, .South.Upstream.EnteringTLs.East.Actuator.c_r, .South.Upstream.EnteringTLs.East.Actuator.c_rr, .South.Upstream.EnteringTLs.East.Actuator.c_rg, .South.Upstream.EnteringTLs.East.Actuator.c_g, .South.Upstream.EnteringTLs.West.Actuator.c_r, .South.Upstream.EnteringTLs.West.Actuator.c_rr, .South.Upstream.EnteringTLs.West.Actuator.c_rg, .South.Upstream.EnteringTLs.West.Actuator.c_g, .South.Upstream.LeavingTLs.East.Actuator.c_g, .South.Upstream.LeavingTLs.East.Actuator.c_r, .South.Upstream.LeavingTLs.West.Actuator.c_g, .South.Upstream.LeavingTLs.West.Actuator.c_r, .South.Downstream.Gates.East.Actuator.c_open, .South.Downstream.Gates.East.Actuator.c_close, .South.Downstream.Gates.East.Actuator.c_emergencyStop, .South.Downstream.Gates.East.Actuator.c_endStopOpening, .South.Downstream.Gates.East.Actuator.c_endStopClosing, .South.Downstream.Gates.West.Actuator.c_open, .South.Downstream.Gates.West.Actuator.c_close, .South.Downstream.Gates.West.Actuator.c_emergencyStop, .South.Downstream.Gates.West.Actuator.c_endStopOpening, .South.Downstream.Gates.West.Actuator.c_endStopClosing, .South.Downstream.Paddles.East.Actuator.c_open, .South.Downstream.Paddles.East.Actuator.c_close, .South.Downstream.Paddles.East.Actuator.c_emergencyStop, .South.Downstream.Paddles.East.Actuator.c_endStopOpening, .South.Downstream.Paddles.East.Actuator.c_endStopClosing, .South.Downstream.Paddles.West.Actuator.c_open, .South.Downstream.Paddles.West.Actuator.c_close, .South.Downstream.Paddles.West.Actuator.c_emergencyStop, .South.Downstream.Paddles.West.Actuator.c_endStopOpening, .South.Downstream.Paddles.West.Actuator.c_endStopClosing, .South.Downstream.EnteringTLs.East.Actuator.c_r, .South.Downstream.EnteringTLs.East.Actuator.c_rr, .South.Downstream.EnteringTLs.East.Actuator.c_rg, .South.Downstream.EnteringTLs.East.Actuator.c_g, .South.Downstream.EnteringTLs.West.Actuator.c_r, .South.Downstream.EnteringTLs.West.Actuator.c_rr, .South.Downstream.EnteringTLs.West.Actuator.c_rg, .South.Downstream.EnteringTLs.West.Actuator.c_g, .South.Downstream.LeavingTLs.East.Actuator.c_g, .South.Downstream.LeavingTLs.East.Actuator.c_r, .South.Downstream.LeavingTLs.West.Actuator.c_g, .South.Downstream.LeavingTLs.West.Actuator.c_r, .Barrier.Downstream.TLs.East.Actuator.c_g, .Barrier.Downstream.TLs.East.Actuator.c_r, .Barrier.Downstream.TLs.West.Actuator.c_g, .Barrier.Downstream.TLs.West.Actuator.c_r, .Barrier.Upstream.TLs.East.Actuator.c_g, .Barrier.Upstream.TLs.East.Actuator.c_r, .Barrier.Upstream.TLs.West.Actuator.c_g, .Barrier.Upstream.TLs.West.Actuator.c_r, .Barrier.Barrier.Actuator.c_open, .Barrier.Barrier.Actuator.c_close, .Barrier.Barrier.Actuator.c_emergencyStop, .Barrier.Barrier.Actuator.c_endStopOpening, .Barrier.Barrier.Actuator.c_endStopClosing;
    location:
      initial;
      marked;
      edge .Barrier.Barrier.Actuator.c_close when true;
      edge .Barrier.Barrier.Actuator.c_emergencyStop when true;
      edge .Barrier.Barrier.Actuator.c_endStopClosing when true;
      edge .Barrier.Barrier.Actuator.c_endStopOpening when true;
      edge .Barrier.Barrier.Actuator.c_open when true;
      edge .Barrier.Downstream.TLs.East.Actuator.c_g when true;
      edge .Barrier.Downstream.TLs.East.Actuator.c_r when true;
      edge .Barrier.Downstream.TLs.West.Actuator.c_g when true;
      edge .Barrier.Downstream.TLs.West.Actuator.c_r when true;
      edge .Barrier.Upstream.TLs.East.Actuator.c_g when true;
      edge .Barrier.Upstream.TLs.East.Actuator.c_r when true;
      edge .Barrier.Upstream.TLs.West.Actuator.c_g when true;
      edge .Barrier.Upstream.TLs.West.Actuator.c_r when true;
      edge .North.Downstream.EnteringTLs.East.Actuator.c_g when true;
      edge .North.Downstream.EnteringTLs.East.Actuator.c_r when true;
      edge .North.Downstream.EnteringTLs.East.Actuator.c_rg when true;
      edge .North.Downstream.EnteringTLs.East.Actuator.c_rr when true;
      edge .North.Downstream.EnteringTLs.West.Actuator.c_g when true;
      edge .North.Downstream.EnteringTLs.West.Actuator.c_r when true;
      edge .North.Downstream.EnteringTLs.West.Actuator.c_rg when true;
      edge .North.Downstream.EnteringTLs.West.Actuator.c_rr when true;
      edge .North.Downstream.Gates.East.Actuator.c_close when true;
      edge .North.Downstream.Gates.East.Actuator.c_emergencyStop when true;
      edge .North.Downstream.Gates.East.Actuator.c_endStopClosing when true;
      edge .North.Downstream.Gates.East.Actuator.c_endStopOpening when true;
      edge .North.Downstream.Gates.East.Actuator.c_open when true;
      edge .North.Downstream.Gates.West.Actuator.c_close when true;
      edge .North.Downstream.Gates.West.Actuator.c_emergencyStop when true;
      edge .North.Downstream.Gates.West.Actuator.c_endStopClosing when true;
      edge .North.Downstream.Gates.West.Actuator.c_endStopOpening when true;
      edge .North.Downstream.Gates.West.Actuator.c_open when true;
      edge .North.Downstream.LeavingTLs.East.Actuator.c_g when true;
      edge .North.Downstream.LeavingTLs.East.Actuator.c_r when true;
      edge .North.Downstream.LeavingTLs.West.Actuator.c_g when true;
      edge .North.Downstream.LeavingTLs.West.Actuator.c_r when true;
      edge .North.Downstream.Paddles.East.Actuator.c_close when true;
      edge .North.Downstream.Paddles.East.Actuator.c_emergencyStop when true;
      edge .North.Downstream.Paddles.East.Actuator.c_endStopClosing when true;
      edge .North.Downstream.Paddles.East.Actuator.c_endStopOpening when true;
      edge .North.Downstream.Paddles.East.Actuator.c_open when true;
      edge .North.Downstream.Paddles.West.Actuator.c_close when true;
      edge .North.Downstream.Paddles.West.Actuator.c_emergencyStop when true;
      edge .North.Downstream.Paddles.West.Actuator.c_endStopClosing when true;
      edge .North.Downstream.Paddles.West.Actuator.c_endStopOpening when true;
      edge .North.Downstream.Paddles.West.Actuator.c_open when true;
      edge .North.Upstream.EnteringTLs.East.Actuator.c_g when true;
      edge .North.Upstream.EnteringTLs.East.Actuator.c_r when true;
      edge .North.Upstream.EnteringTLs.East.Actuator.c_rg when true;
      edge .North.Upstream.EnteringTLs.East.Actuator.c_rr when true;
      edge .North.Upstream.EnteringTLs.West.Actuator.c_g when true;
      edge .North.Upstream.EnteringTLs.West.Actuator.c_r when true;
      edge .North.Upstream.EnteringTLs.West.Actuator.c_rg when true;
      edge .North.Upstream.EnteringTLs.West.Actuator.c_rr when true;
      edge .North.Upstream.Gates.East.Actuator.c_close when true;
      edge .North.Upstream.Gates.East.Actuator.c_emergencyStop when true;
      edge .North.Upstream.Gates.East.Actuator.c_endStopClosing when true;
      edge .North.Upstream.Gates.East.Actuator.c_endStopOpening when true;
      edge .North.Upstream.Gates.East.Actuator.c_open when true;
      edge .North.Upstream.Gates.West.Actuator.c_close when true;
      edge .North.Upstream.Gates.West.Actuator.c_emergencyStop when true;
      edge .North.Upstream.Gates.West.Actuator.c_endStopClosing when true;
      edge .North.Upstream.Gates.West.Actuator.c_endStopOpening when true;
      edge .North.Upstream.Gates.West.Actuator.c_open when true;
      edge .North.Upstream.LeavingTLs.East.Actuator.c_g when true;
      edge .North.Upstream.LeavingTLs.East.Actuator.c_r when true;
      edge .North.Upstream.LeavingTLs.West.Actuator.c_g when true;
      edge .North.Upstream.LeavingTLs.West.Actuator.c_r when true;
      edge .North.Upstream.Paddles.East.Actuator.c_close when true;
      edge .North.Upstream.Paddles.East.Actuator.c_emergencyStop when true;
      edge .North.Upstream.Paddles.East.Actuator.c_endStopClosing when true;
      edge .North.Upstream.Paddles.East.Actuator.c_endStopOpening when true;
      edge .North.Upstream.Paddles.East.Actuator.c_open when true;
      edge .North.Upstream.Paddles.West.Actuator.c_close when true;
      edge .North.Upstream.Paddles.West.Actuator.c_emergencyStop when true;
      edge .North.Upstream.Paddles.West.Actuator.c_endStopClosing when true;
      edge .North.Upstream.Paddles.West.Actuator.c_endStopOpening when true;
      edge .North.Upstream.Paddles.West.Actuator.c_open when true;
      edge .South.Downstream.EnteringTLs.East.Actuator.c_g when true;
      edge .South.Downstream.EnteringTLs.East.Actuator.c_r when true;
      edge .South.Downstream.EnteringTLs.East.Actuator.c_rg when true;
      edge .South.Downstream.EnteringTLs.East.Actuator.c_rr when true;
      edge .South.Downstream.EnteringTLs.West.Actuator.c_g when true;
      edge .South.Downstream.EnteringTLs.West.Actuator.c_r when true;
      edge .South.Downstream.EnteringTLs.West.Actuator.c_rg when true;
      edge .South.Downstream.EnteringTLs.West.Actuator.c_rr when true;
      edge .South.Downstream.Gates.East.Actuator.c_close when true;
      edge .South.Downstream.Gates.East.Actuator.c_emergencyStop when true;
      edge .South.Downstream.Gates.East.Actuator.c_endStopClosing when true;
      edge .South.Downstream.Gates.East.Actuator.c_endStopOpening when true;
      edge .South.Downstream.Gates.East.Actuator.c_open when true;
      edge .South.Downstream.Gates.West.Actuator.c_close when true;
      edge .South.Downstream.Gates.West.Actuator.c_emergencyStop when true;
      edge .South.Downstream.Gates.West.Actuator.c_endStopClosing when true;
      edge .South.Downstream.Gates.West.Actuator.c_endStopOpening when true;
      edge .South.Downstream.Gates.West.Actuator.c_open when true;
      edge .South.Downstream.LeavingTLs.East.Actuator.c_g when true;
      edge .South.Downstream.LeavingTLs.East.Actuator.c_r when true;
      edge .South.Downstream.LeavingTLs.West.Actuator.c_g when true;
      edge .South.Downstream.LeavingTLs.West.Actuator.c_r when true;
      edge .South.Downstream.Paddles.East.Actuator.c_close when true;
      edge .South.Downstream.Paddles.East.Actuator.c_emergencyStop when true;
      edge .South.Downstream.Paddles.East.Actuator.c_endStopClosing when true;
      edge .South.Downstream.Paddles.East.Actuator.c_endStopOpening when true;
      edge .South.Downstream.Paddles.East.Actuator.c_open when true;
      edge .South.Downstream.Paddles.West.Actuator.c_close when true;
      edge .South.Downstream.Paddles.West.Actuator.c_emergencyStop when true;
      edge .South.Downstream.Paddles.West.Actuator.c_endStopClosing when true;
      edge .South.Downstream.Paddles.West.Actuator.c_endStopOpening when true;
      edge .South.Downstream.Paddles.West.Actuator.c_open when true;
      edge .South.Upstream.EnteringTLs.East.Actuator.c_g when true;
      edge .South.Upstream.EnteringTLs.East.Actuator.c_r when true;
      edge .South.Upstream.EnteringTLs.East.Actuator.c_rg when true;
      edge .South.Upstream.EnteringTLs.East.Actuator.c_rr when true;
      edge .South.Upstream.EnteringTLs.West.Actuator.c_g when true;
      edge .South.Upstream.EnteringTLs.West.Actuator.c_r when true;
      edge .South.Upstream.EnteringTLs.West.Actuator.c_rg when true;
      edge .South.Upstream.EnteringTLs.West.Actuator.c_rr when true;
      edge .South.Upstream.Gates.East.Actuator.c_close when true;
      edge .South.Upstream.Gates.East.Actuator.c_emergencyStop when true;
      edge .South.Upstream.Gates.East.Actuator.c_endStopClosing when true;
      edge .South.Upstream.Gates.East.Actuator.c_endStopOpening when true;
      edge .South.Upstream.Gates.East.Actuator.c_open when true;
      edge .South.Upstream.Gates.West.Actuator.c_close when true;
      edge .South.Upstream.Gates.West.Actuator.c_emergencyStop when true;
      edge .South.Upstream.Gates.West.Actuator.c_endStopClosing when true;
      edge .South.Upstream.Gates.West.Actuator.c_endStopOpening when true;
      edge .South.Upstream.Gates.West.Actuator.c_open when true;
      edge .South.Upstream.LeavingTLs.East.Actuator.c_g when true;
      edge .South.Upstream.LeavingTLs.East.Actuator.c_r when true;
      edge .South.Upstream.LeavingTLs.West.Actuator.c_g when true;
      edge .South.Upstream.LeavingTLs.West.Actuator.c_r when true;
      edge .South.Upstream.Paddles.East.Actuator.c_close when true;
      edge .South.Upstream.Paddles.East.Actuator.c_emergencyStop when true;
      edge .South.Upstream.Paddles.East.Actuator.c_endStopClosing when true;
      edge .South.Upstream.Paddles.East.Actuator.c_endStopOpening when true;
      edge .South.Upstream.Paddles.East.Actuator.c_open when true;
      edge .South.Upstream.Paddles.West.Actuator.c_close when true;
      edge .South.Upstream.Paddles.West.Actuator.c_emergencyStop when true;
      edge .South.Upstream.Paddles.West.Actuator.c_endStopClosing when true;
      edge .South.Upstream.Paddles.West.Actuator.c_endStopOpening when true;
      edge .South.Upstream.Paddles.West.Actuator.c_open when true;
  end
end
automaton Wh:
  monitor;
  event high;
  event low;
  location High:
    initial;
    edge low goto Low;
  location Low:
    edge high goto High;
end
svgout id "BNHH" text value fmt("%.2f", H_Downstream) file "../Simulation/visu.svg";
svgout id "BVHH" text value fmt("%.2f", H_Upstream) file "../Simulation/visu.svg";
svgin id "high" event Wh.high file "../Simulation/visu.svg";
svgin id "low" event Wh.low file "../Simulation/visu.svg";
svgout id "w1" attr "fill" value if Wh.High: "#114c8b" else "#9ecaff" end file "../Simulation/visu.svg";
